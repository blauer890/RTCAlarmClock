
RTCAlarmClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa8  08003aa8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa8  08003aa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003b20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003b20  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009113  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182e  00000000  00000000  000291ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001356d  00000000  00000000  0002bb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000793e  00000000  00000000  0003f0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cf6f  00000000  00000000  00046a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002830  00000000  00000000  000b3a10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080039d8 	.word	0x080039d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080039d8 	.word	0x080039d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <alarmOneInit>:
 *      Author: lauer
 */

#include "ds3231.h"

void alarmOneInit(I2C_HandleTypeDef *hi2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]
	uint8_t alarmOneData[4];
	alarmOneData[0] = (1 << A1M1) | 0b00100000;
 8000164:	23a0      	movs	r3, #160	; 0xa0
 8000166:	733b      	strb	r3, [r7, #12]
	alarmOneData[1] = 0b00000000;
 8000168:	2300      	movs	r3, #0
 800016a:	737b      	strb	r3, [r7, #13]
	alarmOneData[2] = 0b00000000;
 800016c:	2300      	movs	r3, #0
 800016e:	73bb      	strb	r3, [r7, #14]
	alarmOneData[3] = 0b00000000;
 8000170:	2300      	movs	r3, #0
 8000172:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c, DS3231_ADDR, 0x07, 1, alarmOneData, 4, 1000);
 8000174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000178:	9302      	str	r3, [sp, #8]
 800017a:	2304      	movs	r3, #4
 800017c:	9301      	str	r3, [sp, #4]
 800017e:	f107 030c 	add.w	r3, r7, #12
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	2301      	movs	r3, #1
 8000186:	2207      	movs	r2, #7
 8000188:	21d0      	movs	r1, #208	; 0xd0
 800018a:	6878      	ldr	r0, [r7, #4]
 800018c:	f001 fbc0 	bl	8001910 <HAL_I2C_Mem_Write>

	uint8_t controlReg = (1 << INTCN) | (1 << A1IE);
 8000190:	2305      	movs	r3, #5
 8000192:	72fb      	strb	r3, [r7, #11]
//	uint8_t controlReg = 0b00000000;
	HAL_I2C_Mem_Write(hi2c, DS3231_ADDR, 0x0E, 1, &controlReg, 1, 1000);
 8000194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000198:	9302      	str	r3, [sp, #8]
 800019a:	2301      	movs	r3, #1
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	f107 030b 	add.w	r3, r7, #11
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2301      	movs	r3, #1
 80001a6:	220e      	movs	r2, #14
 80001a8:	21d0      	movs	r1, #208	; 0xd0
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f001 fbb0 	bl	8001910 <HAL_I2C_Mem_Write>

	uint8_t statusReg = 0b00000000;
 80001b0:	2300      	movs	r3, #0
 80001b2:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Write(hi2c, DS3231_ADDR, 0x0F, 1, &statusReg, 1, 1000);
 80001b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b8:	9302      	str	r3, [sp, #8]
 80001ba:	2301      	movs	r3, #1
 80001bc:	9301      	str	r3, [sp, #4]
 80001be:	f107 030a 	add.w	r3, r7, #10
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2301      	movs	r3, #1
 80001c6:	220f      	movs	r2, #15
 80001c8:	21d0      	movs	r1, #208	; 0xd0
 80001ca:	6878      	ldr	r0, [r7, #4]
 80001cc:	f001 fba0 	bl	8001910 <HAL_I2C_Mem_Write>
}
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}

080001d8 <setAlarmOne>:

void setAlarmOne(I2C_HandleTypeDef *hi2c, uint8_t alarmHour, uint8_t alarmMinute, uint8_t alarmAmPm) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af04      	add	r7, sp, #16
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	4608      	mov	r0, r1
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	4603      	mov	r3, r0
 80001e8:	70fb      	strb	r3, [r7, #3]
 80001ea:	460b      	mov	r3, r1
 80001ec:	70bb      	strb	r3, [r7, #2]
 80001ee:	4613      	mov	r3, r2
 80001f0:	707b      	strb	r3, [r7, #1]
	uint8_t alarmOneData[4];
	alarmOneData[0] = 0x00;
 80001f2:	2300      	movs	r3, #0
 80001f4:	733b      	strb	r3, [r7, #12]
	alarmOneData[1] = 0x7F & alarmMinute;
 80001f6:	78bb      	ldrb	r3, [r7, #2]
 80001f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	737b      	strb	r3, [r7, #13]
	if(alarmAmPm == 1) {
 8000200:	787b      	ldrb	r3, [r7, #1]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d105      	bne.n	8000212 <setAlarmOne+0x3a>
		alarmOneData[2] = (1 << 6) | (1 << 5) | alarmHour;
 8000206:	78fb      	ldrb	r3, [r7, #3]
 8000208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800020c:	b2db      	uxtb	r3, r3
 800020e:	73bb      	strb	r3, [r7, #14]
 8000210:	e007      	b.n	8000222 <setAlarmOne+0x4a>
	} else if (alarmAmPm == 0) {
 8000212:	787b      	ldrb	r3, [r7, #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d104      	bne.n	8000222 <setAlarmOne+0x4a>
		alarmOneData[2] = (1 << 6) | alarmHour;
 8000218:	78fb      	ldrb	r3, [r7, #3]
 800021a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800021e:	b2db      	uxtb	r3, r3
 8000220:	73bb      	strb	r3, [r7, #14]
	}
	alarmOneData[3] = (1 << A1M4) | 0x00;
 8000222:	2380      	movs	r3, #128	; 0x80
 8000224:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c, DS3231_ADDR, 0x07, 1, alarmOneData, 4, 1000);
 8000226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2304      	movs	r3, #4
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	f107 030c 	add.w	r3, r7, #12
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2301      	movs	r3, #1
 8000238:	2207      	movs	r2, #7
 800023a:	21d0      	movs	r1, #208	; 0xd0
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f001 fb67 	bl	8001910 <HAL_I2C_Mem_Write>

}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <setTime>:

void setTime(I2C_HandleTypeDef *hi2c) {
 800024a:	b580      	push	{r7, lr}
 800024c:	b088      	sub	sp, #32
 800024e:	af04      	add	r7, sp, #16
 8000250:	6078      	str	r0, [r7, #4]
	uint8_t setTime[7];

	setTime[0] = decToBcd(54);
 8000252:	2036      	movs	r0, #54	; 0x36
 8000254:	f000 f890 	bl	8000378 <decToBcd>
 8000258:	4603      	mov	r3, r0
 800025a:	723b      	strb	r3, [r7, #8]
	setTime[1] = decToBcd(0);
 800025c:	2000      	movs	r0, #0
 800025e:	f000 f88b 	bl	8000378 <decToBcd>
 8000262:	4603      	mov	r3, r0
 8000264:	727b      	strb	r3, [r7, #9]
	setTime[2] = 0b01000000 | decToBcd(7); // 12 hour mode
 8000266:	2007      	movs	r0, #7
 8000268:	f000 f886 	bl	8000378 <decToBcd>
 800026c:	4603      	mov	r3, r0
 800026e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000272:	b2db      	uxtb	r3, r3
 8000274:	72bb      	strb	r3, [r7, #10]
	setTime[3] = decToBcd(2);
 8000276:	2002      	movs	r0, #2
 8000278:	f000 f87e 	bl	8000378 <decToBcd>
 800027c:	4603      	mov	r3, r0
 800027e:	72fb      	strb	r3, [r7, #11]
	setTime[4] = decToBcd(27);
 8000280:	201b      	movs	r0, #27
 8000282:	f000 f879 	bl	8000378 <decToBcd>
 8000286:	4603      	mov	r3, r0
 8000288:	733b      	strb	r3, [r7, #12]
	setTime[5] = decToBcd(7);
 800028a:	2007      	movs	r0, #7
 800028c:	f000 f874 	bl	8000378 <decToBcd>
 8000290:	4603      	mov	r3, r0
 8000292:	737b      	strb	r3, [r7, #13]
	setTime[6] = decToBcd(20);
 8000294:	2014      	movs	r0, #20
 8000296:	f000 f86f 	bl	8000378 <decToBcd>
 800029a:	4603      	mov	r3, r0
 800029c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, DS3231_ADDR, 0x00, 1, setTime, 7, 1000);
 800029e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a2:	9302      	str	r3, [sp, #8]
 80002a4:	2307      	movs	r3, #7
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	f107 0308 	add.w	r3, r7, #8
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2301      	movs	r3, #1
 80002b0:	2200      	movs	r2, #0
 80002b2:	21d0      	movs	r1, #208	; 0xd0
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f001 fb2b 	bl	8001910 <HAL_I2C_Mem_Write>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <getTime>:

void getTime(I2C_HandleTypeDef *hi2c, Time *time) {
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b088      	sub	sp, #32
 80002c6:	af04      	add	r7, sp, #16
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
	uint8_t getTime[7];

	HAL_I2C_Mem_Read(hi2c, DS3231_ADDR, 0x00, 1, getTime, 7, 100);
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	9302      	str	r3, [sp, #8]
 80002d0:	2307      	movs	r3, #7
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2301      	movs	r3, #1
 80002dc:	2200      	movs	r2, #0
 80002de:	21d0      	movs	r1, #208	; 0xd0
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f001 fc0f 	bl	8001b04 <HAL_I2C_Mem_Read>

	time->seconds = bcdToDec(getTime[0]);
 80002e6:	7a3b      	ldrb	r3, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f869 	bl	80003c0 <bcdToDec>
 80002ee:	4602      	mov	r2, r0
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	601a      	str	r2, [r3, #0]
	time->minutes = bcdToDec(getTime[1]);
 80002f4:	7a7b      	ldrb	r3, [r7, #9]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f862 	bl	80003c0 <bcdToDec>
 80002fc:	4602      	mov	r2, r0
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	605a      	str	r2, [r3, #4]
	time->hours = bcdToDec(0x1F & getTime[2]);
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	f003 031f 	and.w	r3, r3, #31
 8000308:	b2db      	uxtb	r3, r3
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f858 	bl	80003c0 <bcdToDec>
 8000310:	4602      	mov	r2, r0
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	609a      	str	r2, [r3, #8]
	time->dow = bcdToDec(getTime[3]);
 8000316:	7afb      	ldrb	r3, [r7, #11]
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f851 	bl	80003c0 <bcdToDec>
 800031e:	4602      	mov	r2, r0
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	60da      	str	r2, [r3, #12]
	time->dom = bcdToDec(getTime[4]);
 8000324:	7b3b      	ldrb	r3, [r7, #12]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f84a 	bl	80003c0 <bcdToDec>
 800032c:	4602      	mov	r2, r0
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	611a      	str	r2, [r3, #16]
	time->month = bcdToDec(getTime[5]);
 8000332:	7b7b      	ldrb	r3, [r7, #13]
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f843 	bl	80003c0 <bcdToDec>
 800033a:	4602      	mov	r2, r0
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	615a      	str	r2, [r3, #20]
	time->year = bcdToDec(getTime[6]);
 8000340:	7bbb      	ldrb	r3, [r7, #14]
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f83c 	bl	80003c0 <bcdToDec>
 8000348:	4602      	mov	r2, r0
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	619a      	str	r2, [r3, #24]
	if((getTime[2] & 0x20) == 0) {
 800034e:	7abb      	ldrb	r3, [r7, #10]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	2b00      	cmp	r3, #0
 8000356:	d103      	bne.n	8000360 <getTime+0x9e>
		time->amPm = 0;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
	} else if((getTime[2] & 0x20) == 0x20) {
		time->amPm = 1;
	}
}
 800035e:	e007      	b.n	8000370 <getTime+0xae>
	} else if((getTime[2] & 0x20) == 0x20) {
 8000360:	7abb      	ldrb	r3, [r7, #10]
 8000362:	f003 0320 	and.w	r3, r3, #32
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <getTime+0xae>
		time->amPm = 1;
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2201      	movs	r2, #1
 800036e:	61da      	str	r2, [r3, #28]
}
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <decToBcd>:

uint8_t decToBcd(int val) {
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <decToBcd+0x44>)
 8000384:	fb82 1203 	smull	r1, r2, r2, r3
 8000388:	1092      	asrs	r2, r2, #2
 800038a:	17db      	asrs	r3, r3, #31
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	b2db      	uxtb	r3, r3
 8000390:	011b      	lsls	r3, r3, #4
 8000392:	b2d8      	uxtb	r0, r3
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <decToBcd+0x44>)
 8000398:	fb83 1302 	smull	r1, r3, r3, r2
 800039c:	1099      	asrs	r1, r3, #2
 800039e:	17d3      	asrs	r3, r2, #31
 80003a0:	1ac9      	subs	r1, r1, r3
 80003a2:	460b      	mov	r3, r1
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	440b      	add	r3, r1
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	1ad1      	subs	r1, r2, r3
 80003ac:	b2cb      	uxtb	r3, r1
 80003ae:	4403      	add	r3, r0
 80003b0:	b2db      	uxtb	r3, r3
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	66666667 	.word	0x66666667

080003c0 <bcdToDec>:

int bcdToDec(uint8_t val) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	091b      	lsrs	r3, r3, #4
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	461a      	mov	r2, r3
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	4413      	add	r3, r2
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <writeNibble>:
 *      Author: lauer
 */

#include "lcd1602.h"

void writeNibble(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t nibble) {
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af02      	add	r7, sp, #8
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	460b      	mov	r3, r1
 80003f8:	70fb      	strb	r3, [r7, #3]
 80003fa:	4613      	mov	r3, r2
 80003fc:	70bb      	strb	r3, [r7, #2]
	uint8_t setup = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0x00;
 8000402:	2300      	movs	r3, #0
 8000404:	73bb      	strb	r3, [r7, #14]
	uint8_t closing = 0x00;
 8000406:	2300      	movs	r3, #0
 8000408:	737b      	strb	r3, [r7, #13]

	if(reg == 1) {
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d133      	bne.n	8000478 <writeNibble+0x8a>
		setup = 0b00001101;
 8000410:	230d      	movs	r3, #13
 8000412:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &setup, 1, 100);
 8000414:	f107 020f 	add.w	r2, r7, #15
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2301      	movs	r3, #1
 800041e:	214e      	movs	r1, #78	; 0x4e
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f001 f977 	bl	8001714 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000426:	200a      	movs	r0, #10
 8000428:	f000 fd70 	bl	8000f0c <HAL_Delay>
		data = (nibble << 4) | 0b00001101;
 800042c:	78bb      	ldrb	r3, [r7, #2]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	b25b      	sxtb	r3, r3
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b25b      	sxtb	r3, r3
 8000438:	b2db      	uxtb	r3, r3
 800043a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &data, 1, 100);
 800043c:	f107 020e 	add.w	r2, r7, #14
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2301      	movs	r3, #1
 8000446:	214e      	movs	r1, #78	; 0x4e
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f001 f963 	bl	8001714 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800044e:	200a      	movs	r0, #10
 8000450:	f000 fd5c 	bl	8000f0c <HAL_Delay>
		closing = (nibble << 4) | 0b00001001;
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	b25b      	sxtb	r3, r3
 800045a:	f043 0309 	orr.w	r3, r3, #9
 800045e:	b25b      	sxtb	r3, r3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &closing, 1, 100);
 8000464:	f107 020d 	add.w	r2, r7, #13
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2301      	movs	r3, #1
 800046e:	214e      	movs	r1, #78	; 0x4e
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f001 f94f 	bl	8001714 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &data, 1, 100);
		HAL_Delay(1);
		closing = (nibble << 4) | 0b00001000;
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &closing, 1, 100);
	}
}
 8000476:	e035      	b.n	80004e4 <writeNibble+0xf6>
	} else if (reg == 0) {
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d132      	bne.n	80004e4 <writeNibble+0xf6>
		setup = 0b00001100;
 800047e:	230c      	movs	r3, #12
 8000480:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &setup, 1, 100);
 8000482:	f107 020f 	add.w	r2, r7, #15
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2301      	movs	r3, #1
 800048c:	214e      	movs	r1, #78	; 0x4e
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f001 f940 	bl	8001714 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f000 fd39 	bl	8000f0c <HAL_Delay>
		data = (nibble << 4) | 0b00001100;
 800049a:	78bb      	ldrb	r3, [r7, #2]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	f043 030c 	orr.w	r3, r3, #12
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &data, 1, 100);
 80004aa:	f107 020e 	add.w	r2, r7, #14
 80004ae:	2364      	movs	r3, #100	; 0x64
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	214e      	movs	r1, #78	; 0x4e
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f001 f92c 	bl	8001714 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f000 fd25 	bl	8000f0c <HAL_Delay>
		closing = (nibble << 4) | 0b00001000;
 80004c2:	78bb      	ldrb	r3, [r7, #2]
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	f043 0308 	orr.w	r3, r3, #8
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2c, LCD6502_ADDR, &closing, 1, 100);
 80004d2:	f107 020d 	add.w	r2, r7, #13
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	214e      	movs	r1, #78	; 0x4e
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f001 f918 	bl	8001714 <HAL_I2C_Master_Transmit>
}
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <writeByte>:

void writeByte(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t byte) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
 80004f8:	4613      	mov	r3, r2
 80004fa:	70bb      	strb	r3, [r7, #2]
	uint8_t highNibble = 0x0F & (byte >> 4);
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	091b      	lsrs	r3, r3, #4
 8000500:	73fb      	strb	r3, [r7, #15]
	uint8_t lowNibble = 0x0F & byte;
 8000502:	78bb      	ldrb	r3, [r7, #2]
 8000504:	f003 030f 	and.w	r3, r3, #15
 8000508:	73bb      	strb	r3, [r7, #14]
	writeNibble(hi2c, reg, highNibble);
 800050a:	7bfa      	ldrb	r2, [r7, #15]
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	4619      	mov	r1, r3
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ff6c 	bl	80003ee <writeNibble>
	HAL_Delay(5);
 8000516:	2005      	movs	r0, #5
 8000518:	f000 fcf8 	bl	8000f0c <HAL_Delay>
	writeNibble(hi2c, reg, lowNibble);
 800051c:	7bba      	ldrb	r2, [r7, #14]
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ff63 	bl	80003ee <writeNibble>
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <initLCD>:

void initLCD(I2C_HandleTypeDef *hi2c) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
//	HAL_Delay(4);
//	writeNibble(hi2c, CR, 0b00000011);
//	HAL_Delay(1);
//	writeNibble(hi2c, CR, 0b00000011);
//	HAL_Delay(1);
	writeNibble(hi2c, CR, 0b00000010);
 8000538:	2202      	movs	r2, #2
 800053a:	2100      	movs	r1, #0
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff56 	bl	80003ee <writeNibble>
//	HAL_Delay(10);
	writeByte(hi2c, CR, 0b00101000);
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f7ff ffd0 	bl	80004ec <writeByte>
//	HAL_Delay(10);
	writeByte(hi2c, CR, 0b00001100);
 800054c:	220c      	movs	r2, #12
 800054e:	2100      	movs	r1, #0
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffcb 	bl	80004ec <writeByte>
//	HAL_Delay(10);
	writeByte(hi2c, CR, 0b00000001);
 8000556:	2201      	movs	r2, #1
 8000558:	2100      	movs	r1, #0
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff ffc6 	bl	80004ec <writeByte>
//	HAL_Delay(10);	//       DL/N/
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <lcd_putc>:
	lowNibble = readNibble(hi2c, reg);
	byte = (highNibble << 4) | lowNibble;
	return byte;
}

void lcd_putc(I2C_HandleTypeDef *hi2c, uint8_t c) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
	writeByte(hi2c, DR, c);
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	461a      	mov	r2, r3
 8000578:	2101      	movs	r1, #1
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ffb6 	bl	80004ec <writeByte>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <lcd_puts>:

void lcd_puts(I2C_HandleTypeDef *hi2c, uint8_t *s, uint16_t size) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	4613      	mov	r3, r2
 8000594:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i < size; i++) {
 8000596:	2300      	movs	r3, #0
 8000598:	75fb      	strb	r3, [r7, #23]
 800059a:	e00a      	b.n	80005b2 <lcd_puts+0x2a>
		lcd_putc(hi2c, s[i]);
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f7ff ffde 	bl	8000568 <lcd_putc>
	for(uint8_t i = 0; i < size; i++) {
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3301      	adds	r3, #1
 80005b0:	75fb      	strb	r3, [r7, #23]
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	88fa      	ldrh	r2, [r7, #6]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d8ef      	bhi.n	800059c <lcd_puts+0x14>
	}
}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b098      	sub	sp, #96	; 0x60
 80005c8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ca:	f000 fc3d 	bl	8000e48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ce:	f000 f9a5 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d2:	f000 fa3d 	bl	8000a50 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005d6:	f000 fa11 	bl	80009fc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005da:	f000 f9e1 	bl	80009a0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	alarmOneInit(&hi2c1);
 80005de:	48c3      	ldr	r0, [pc, #780]	; (80008ec <main+0x328>)
 80005e0:	f7ff fdbc 	bl	800015c <alarmOneInit>
	setTime(&hi2c1);
 80005e4:	48c1      	ldr	r0, [pc, #772]	; (80008ec <main+0x328>)
 80005e6:	f7ff fe30 	bl	800024a <setTime>
	uint8_t lcdBuf[29];
	Time time;
	initLCD(&hi2c1);
 80005ea:	48c0      	ldr	r0, [pc, #768]	; (80008ec <main+0x328>)
 80005ec:	f7ff ffa0 	bl	8000530 <initLCD>
	uint8_t alarmHour = 12;
 80005f0:	230c      	movs	r3, #12
 80005f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t alarmMinute = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t alarmAmPm = 0; // 1 - pm, 0 - am
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Print time
		getTime(&hi2c1, &time);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4619      	mov	r1, r3
 8000608:	48b8      	ldr	r0, [pc, #736]	; (80008ec <main+0x328>)
 800060a:	f7ff fe5a 	bl	80002c2 <getTime>
		if (time.amPm == 1) {
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	2b01      	cmp	r3, #1
 8000612:	d107      	bne.n	8000624 <main+0x60>
			sprintf(lcdBuf, "%2d:%02dpm", time.hours, time.minutes);
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800061c:	49b4      	ldr	r1, [pc, #720]	; (80008f0 <main+0x32c>)
 800061e:	f002 fdc9 	bl	80031b4 <siprintf>
 8000622:	e009      	b.n	8000638 <main+0x74>
		} else if (time.amPm == 0) {
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	2b00      	cmp	r3, #0
 8000628:	d106      	bne.n	8000638 <main+0x74>
			sprintf(lcdBuf, "%2d:%02dam", time.hours, time.minutes);
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000632:	49b0      	ldr	r1, [pc, #704]	; (80008f4 <main+0x330>)
 8000634:	f002 fdbe 	bl	80031b4 <siprintf>
		}

		writeByte(&hi2c1, CR, 0b10000000);
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	2100      	movs	r1, #0
 800063c:	48ab      	ldr	r0, [pc, #684]	; (80008ec <main+0x328>)
 800063e:	f7ff ff55 	bl	80004ec <writeByte>
		lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fd80 	bl	800014c <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000654:	4619      	mov	r1, r3
 8000656:	48a5      	ldr	r0, [pc, #660]	; (80008ec <main+0x328>)
 8000658:	f7ff ff96 	bl	8000588 <lcd_puts>

		// Print date
		writeByte(&hi2c1, CR, 0b10000000 | 0x08); // set cursor to address 0x08
 800065c:	2288      	movs	r2, #136	; 0x88
 800065e:	2100      	movs	r1, #0
 8000660:	48a2      	ldr	r0, [pc, #648]	; (80008ec <main+0x328>)
 8000662:	f7ff ff43 	bl	80004ec <writeByte>
		sprintf(lcdBuf, "%2d/%d/%-2d", time.month, time.dom, time.year);
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	69b9      	ldr	r1, [r7, #24]
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	460b      	mov	r3, r1
 8000674:	49a0      	ldr	r1, [pc, #640]	; (80008f8 <main+0x334>)
 8000676:	f002 fd9d 	bl	80031b4 <siprintf>
		lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 800067a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fd64 	bl	800014c <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068c:	4619      	mov	r1, r3
 800068e:	4897      	ldr	r0, [pc, #604]	; (80008ec <main+0x328>)
 8000690:	f7ff ff7a 	bl	8000588 <lcd_puts>

		// Print alarm
		writeByte(&hi2c1, CR, 0b10000000 | 0x44);
 8000694:	22c4      	movs	r2, #196	; 0xc4
 8000696:	2100      	movs	r1, #0
 8000698:	4894      	ldr	r0, [pc, #592]	; (80008ec <main+0x328>)
 800069a:	f7ff ff27 	bl	80004ec <writeByte>
		if (alarmAmPm == 1) {
 800069e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d109      	bne.n	80006ba <main+0xf6>
			sprintf(lcdBuf, "A %2d:%02dpm", alarmHour, alarmMinute);
 80006a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006aa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80006ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006b2:	4992      	ldr	r1, [pc, #584]	; (80008fc <main+0x338>)
 80006b4:	f002 fd7e 	bl	80031b4 <siprintf>
 80006b8:	e00c      	b.n	80006d4 <main+0x110>
		} else if (alarmAmPm == 0) {
 80006ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d108      	bne.n	80006d4 <main+0x110>
			sprintf(lcdBuf, "A %2d:%02dam", alarmHour, alarmMinute);
 80006c2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80006ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80006ce:	498c      	ldr	r1, [pc, #560]	; (8000900 <main+0x33c>)
 80006d0:	f002 fd70 	bl	80031b4 <siprintf>
		}
		lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 80006d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd37 	bl	800014c <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4880      	ldr	r0, [pc, #512]	; (80008ec <main+0x328>)
 80006ea:	f7ff ff4d 	bl	8000588 <lcd_puts>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80006ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f2:	4884      	ldr	r0, [pc, #528]	; (8000904 <main+0x340>)
 80006f4:	f000 fe94 	bl	8001420 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d157      	bne.n	80007ae <main+0x1ea>
			// Blink GPIOA9 if the alarm was triggered
			for (int i = 0; i < 3; i++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
 8000702:	e016      	b.n	8000732 <main+0x16e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); // PA9
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	487f      	ldr	r0, [pc, #508]	; (8000908 <main+0x344>)
 800070c:	f000 fe9f 	bl	800144e <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000714:	f000 fbfa 	bl	8000f0c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // PA9
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	487a      	ldr	r0, [pc, #488]	; (8000908 <main+0x344>)
 8000720:	f000 fe95 	bl	800144e <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f000 fbf0 	bl	8000f0c <HAL_Delay>
			for (int i = 0; i < 3; i++) {
 800072c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800072e:	3301      	adds	r3, #1
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
 8000732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000734:	2b02      	cmp	r3, #2
 8000736:	dde5      	ble.n	8000704 <main+0x140>
			}

			// Clear the A1F flag
			uint8_t statusReg = 0b00000000;
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
			HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, 0x0F, 1, &statusReg, 1,
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2301      	movs	r3, #1
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	220f      	movs	r2, #15
 800074e:	21d0      	movs	r1, #208	; 0xd0
 8000750:	4866      	ldr	r0, [pc, #408]	; (80008ec <main+0x328>)
 8000752:	f001 f8dd 	bl	8001910 <HAL_I2C_Mem_Write>
					1000);
		}

		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000756:	e02a      	b.n	80007ae <main+0x1ea>
			writeByte(&hi2c1, CR, 0b10000000 | 0x46);
 8000758:	22c6      	movs	r2, #198	; 0xc6
 800075a:	2100      	movs	r1, #0
 800075c:	4863      	ldr	r0, [pc, #396]	; (80008ec <main+0x328>)
 800075e:	f7ff fec5 	bl	80004ec <writeByte>
			if (alarmHour == 12) {
 8000762:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d103      	bne.n	8000772 <main+0x1ae>
				alarmHour = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000770:	e004      	b.n	800077c <main+0x1b8>
			} else {
				alarmHour++;
 8000772:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000776:	3301      	adds	r3, #1
 8000778:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			}
			sprintf(lcdBuf, "%2d", alarmHour);
 800077c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000784:	4961      	ldr	r1, [pc, #388]	; (800090c <main+0x348>)
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fd14 	bl	80031b4 <siprintf>
			lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 800078c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fcdb 	bl	800014c <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4619      	mov	r1, r3
 80007a0:	4852      	ldr	r0, [pc, #328]	; (80008ec <main+0x328>)
 80007a2:	f7ff fef1 	bl	8000588 <lcd_puts>
			HAL_Delay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f000 fbaf 	bl	8000f0c <HAL_Delay>
		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	4854      	ldr	r0, [pc, #336]	; (8000904 <main+0x340>)
 80007b4:	f000 fe34 	bl	8001420 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0cc      	beq.n	8000758 <main+0x194>
		}

		HAL_Delay(2000);
 80007be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007c2:	f000 fba3 	bl	8000f0c <HAL_Delay>

		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80007c6:	e02a      	b.n	800081e <main+0x25a>
			writeByte(&hi2c1, CR, 0b10000000 | 0x49);
 80007c8:	22c9      	movs	r2, #201	; 0xc9
 80007ca:	2100      	movs	r1, #0
 80007cc:	4847      	ldr	r0, [pc, #284]	; (80008ec <main+0x328>)
 80007ce:	f7ff fe8d 	bl	80004ec <writeByte>
			if (alarmMinute == 59) {
 80007d2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80007d6:	2b3b      	cmp	r3, #59	; 0x3b
 80007d8:	d103      	bne.n	80007e2 <main+0x21e>
				alarmMinute = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80007e0:	e004      	b.n	80007ec <main+0x228>
			} else {
				alarmMinute++;
 80007e2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80007e6:	3301      	adds	r3, #1
 80007e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			}
			sprintf(lcdBuf, "%02d", alarmMinute);
 80007ec:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80007f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f4:	4946      	ldr	r1, [pc, #280]	; (8000910 <main+0x34c>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fcdc 	bl	80031b4 <siprintf>
			lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 80007fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fca3 	bl	800014c <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	4619      	mov	r1, r3
 8000810:	4836      	ldr	r0, [pc, #216]	; (80008ec <main+0x328>)
 8000812:	f7ff feb9 	bl	8000588 <lcd_puts>
			HAL_Delay(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f000 fb77 	bl	8000f0c <HAL_Delay>
		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800081e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000822:	4838      	ldr	r0, [pc, #224]	; (8000904 <main+0x340>)
 8000824:	f000 fdfc 	bl	8001420 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0cc      	beq.n	80007c8 <main+0x204>
		}

		HAL_Delay(2000);
 800082e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000832:	f000 fb6b 	bl	8000f0c <HAL_Delay>

		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000836:	e043      	b.n	80008c0 <main+0x2fc>
			writeByte(&hi2c1, CR, 0b10000000 | 0x4B);
 8000838:	22cb      	movs	r2, #203	; 0xcb
 800083a:	2100      	movs	r1, #0
 800083c:	482b      	ldr	r0, [pc, #172]	; (80008ec <main+0x328>)
 800083e:	f7ff fe55 	bl	80004ec <writeByte>
			if (alarmAmPm == 0) {
 8000842:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000846:	2b00      	cmp	r3, #0
 8000848:	d119      	bne.n	800087e <main+0x2ba>
				sprintf(lcdBuf, "am");
 800084a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084e:	4a31      	ldr	r2, [pc, #196]	; (8000914 <main+0x350>)
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	4611      	mov	r1, r2
 8000854:	8019      	strh	r1, [r3, #0]
 8000856:	3302      	adds	r3, #2
 8000858:	0c12      	lsrs	r2, r2, #16
 800085a:	701a      	strb	r2, [r3, #0]
				lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 800085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fc73 	bl	800014c <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	481e      	ldr	r0, [pc, #120]	; (80008ec <main+0x328>)
 8000872:	f7ff fe89 	bl	8000588 <lcd_puts>
				alarmAmPm = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800087c:	e01c      	b.n	80008b8 <main+0x2f4>
			} else if (alarmAmPm == 1) {
 800087e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000882:	2b01      	cmp	r3, #1
 8000884:	d118      	bne.n	80008b8 <main+0x2f4>
				sprintf(lcdBuf, "pm");
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <main+0x354>)
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	4611      	mov	r1, r2
 8000890:	8019      	strh	r1, [r3, #0]
 8000892:	3302      	adds	r3, #2
 8000894:	0c12      	lsrs	r2, r2, #16
 8000896:	701a      	strb	r2, [r3, #0]
				lcd_puts(&hi2c1, lcdBuf, strlen(lcdBuf));
 8000898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc55 	bl	800014c <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480f      	ldr	r0, [pc, #60]	; (80008ec <main+0x328>)
 80008ae:	f7ff fe6b 	bl	8000588 <lcd_puts>
				alarmAmPm = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			}
			HAL_Delay(500);
 80008b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008bc:	f000 fb26 	bl	8000f0c <HAL_Delay>
		while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	480f      	ldr	r0, [pc, #60]	; (8000904 <main+0x340>)
 80008c6:	f000 fdab 	bl	8001420 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0b3      	beq.n	8000838 <main+0x274>
		}

		setAlarmOne(&hi2c1, alarmHour, alarmMinute, alarmAmPm);
 80008d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80008d4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80008d8:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <main+0x328>)
 80008de:	f7ff fc7b 	bl	80001d8 <setAlarmOne>

//		if(HAL_GPIO_ReadPin())
		HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f000 fb12 	bl	8000f0c <HAL_Delay>
	while (1) {
 80008e8:	e68b      	b.n	8000602 <main+0x3e>
 80008ea:	bf00      	nop
 80008ec:	20000098 	.word	0x20000098
 80008f0:	080039f0 	.word	0x080039f0
 80008f4:	080039fc 	.word	0x080039fc
 80008f8:	08003a08 	.word	0x08003a08
 80008fc:	08003a14 	.word	0x08003a14
 8000900:	08003a24 	.word	0x08003a24
 8000904:	40011000 	.word	0x40011000
 8000908:	40010800 	.word	0x40010800
 800090c:	08003a34 	.word	0x08003a34
 8000910:	08003a38 	.word	0x08003a38
 8000914:	08003a40 	.word	0x08003a40
 8000918:	08003a44 	.word	0x08003a44

0800091c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	; 0x40
 8000920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fc3a 	bl	80031a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000946:	2310      	movs	r3, #16
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000952:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f001 feb3 	bl	80026c8 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x50>
		Error_Handler();
 8000968:	f000 f8f0 	bl	8000b4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f002 f91e 	bl	8002bc8 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x7a>
		Error_Handler();
 8000992:	f000 f8db 	bl	8000b4c <Error_Handler>
	}
}
 8000996:	bf00      	nop
 8000998:	3740      	adds	r7, #64	; 0x40
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f000 fd71 	bl	80014c4 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
		Error_Handler();
 80009e8:	f000 f8b0 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000098 	.word	0x20000098
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f002 fa64 	bl	8002f00 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a3e:	f000 f885 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000ec 	.word	0x200000ec
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a64:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a34      	ldr	r2, [pc, #208]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a82:	f043 0320 	orr.w	r3, r3, #32
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xec>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_9, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000aca:	481d      	ldr	r0, [pc, #116]	; (8000b40 <MX_GPIO_Init+0xf0>)
 8000acc:	f000 fcbf 	bl	800144e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_GPIO_Init+0xf4>)
 8000ad8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4818      	ldr	r0, [pc, #96]	; (8000b48 <MX_GPIO_Init+0xf8>)
 8000ae6:	f000 fb41 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_9;
 8000aea:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000aee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0xf0>)
 8000b04:	f000 fb32 	bl	800116c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <MX_GPIO_Init+0xf8>)
 8000b1e:	f000 fb25 	bl	800116c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2028      	movs	r0, #40	; 0x28
 8000b28:	f000 fae9 	bl	80010fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2c:	2028      	movs	r0, #40	; 0x28
 8000b2e:	f000 fb02 	bl	8001136 <HAL_NVIC_EnableIRQ>

}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	10110000 	.word	0x10110000
 8000b48:	40011000 	.word	0x40011000

08000b4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_I2C_MspInit+0x90>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d132      	bne.n	8000c42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfa:	2312      	movs	r3, #18
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <HAL_I2C_MspInit+0x98>)
 8000c0a:	f000 faaf 	bl	800116c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_I2C_MspInit+0x9c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <HAL_I2C_MspInit+0x9c>)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_I2C_MspInit+0x94>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x70>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d123      	bne.n	8000cc4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	61d3      	str	r3, [r2, #28]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_UART_MspInit+0x74>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cac:	230c      	movs	r3, #12
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_UART_MspInit+0x78>)
 8000cc0:	f000 fa54 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	40010800 	.word	0x40010800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8d6 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d34:	f000 fba4 	bl	8001480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x50>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x16>
		heap_end = &end;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <_sbrk+0x50>)
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <_sbrk+0x54>)
 8000d50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <_sbrk+0x50>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <_sbrk+0x50>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	466a      	mov	r2, sp
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d907      	bls.n	8000d76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d66:	f002 f9f3 	bl	8003150 <__errno>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	e006      	b.n	8000d84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <_sbrk+0x50>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <_sbrk+0x50>)
 8000d80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000008c 	.word	0x2000008c
 8000d90:	20000138 	.word	0x20000138

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <SystemInit+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <SystemInit+0x5c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <SystemInit+0x5c>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4911      	ldr	r1, [pc, #68]	; (8000df0 <SystemInit+0x5c>)
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <SystemInit+0x60>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <SystemInit+0x5c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <SystemInit+0x5c>)
 8000db6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <SystemInit+0x5c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SystemInit+0x5c>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <SystemInit+0x5c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <SystemInit+0x5c>)
 8000dd2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000dd6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SystemInit+0x5c>)
 8000dda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SystemInit+0x64>)
 8000de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	f8ff0000 	.word	0xf8ff0000
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dfe:	e003      	b.n	8000e08 <LoopCopyDataInit>

08000e00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e06:	3104      	adds	r1, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e10:	d3f6      	bcc.n	8000e00 <CopyDataInit>
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e14:	e002      	b.n	8000e1c <LoopFillZerobss>

08000e16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e18:	f842 3b04 	str.w	r3, [r2], #4

08000e1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e20:	d3f9      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e22:	f7ff ffb7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 f999 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2a:	f7ff fbcb 	bl	80005c4 <main>
  bx lr
 8000e2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e30:	08003ab0 	.word	0x08003ab0
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e3c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e40:	20000134 	.word	0x20000134

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f945 	bl	80010e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe78 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f95d 	bl	8001152 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f925 	bl	80010fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000012c 	.word	0x2000012c

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	2000012c 	.word	0x2000012c

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_Delay+0x40>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ff90 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff2d 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff42 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff90 	bl	8001040 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff5f 	bl	8000fec <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff35 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa2 	bl	80010a4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e127      	b.n	80013d0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001180:	2201      	movs	r2, #1
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8116 	bne.w	80013ca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d034      	beq.n	8001210 <HAL_GPIO_Init+0xa4>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d80d      	bhi.n	80011c6 <HAL_GPIO_Init+0x5a>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x9a>
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d804      	bhi.n	80011bc <HAL_GPIO_Init+0x50>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d031      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d01c      	beq.n	80011f4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ba:	e048      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d043      	beq.n	8001248 <HAL_GPIO_Init+0xdc>
 80011c0:	2b11      	cmp	r3, #17
 80011c2:	d01b      	beq.n	80011fc <HAL_GPIO_Init+0x90>
          break;
 80011c4:	e043      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011c6:	4a89      	ldr	r2, [pc, #548]	; (80013ec <HAL_GPIO_Init+0x280>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d026      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011cc:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_GPIO_Init+0x280>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d806      	bhi.n	80011e0 <HAL_GPIO_Init+0x74>
 80011d2:	4a87      	ldr	r2, [pc, #540]	; (80013f0 <HAL_GPIO_Init+0x284>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d020      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011d8:	4a86      	ldr	r2, [pc, #536]	; (80013f4 <HAL_GPIO_Init+0x288>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01d      	beq.n	800121a <HAL_GPIO_Init+0xae>
          break;
 80011de:	e036      	b.n	800124e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011e0:	4a85      	ldr	r2, [pc, #532]	; (80013f8 <HAL_GPIO_Init+0x28c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011e6:	4a85      	ldr	r2, [pc, #532]	; (80013fc <HAL_GPIO_Init+0x290>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d016      	beq.n	800121a <HAL_GPIO_Init+0xae>
 80011ec:	4a84      	ldr	r2, [pc, #528]	; (8001400 <HAL_GPIO_Init+0x294>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e02c      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e028      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	3304      	adds	r3, #4
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e023      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	3308      	adds	r3, #8
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e01e      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e019      	b.n	800124e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001222:	2304      	movs	r3, #4
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e012      	b.n	800124e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001230:	2308      	movs	r3, #8
 8001232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	611a      	str	r2, [r3, #16]
          break;
 800123a:	e008      	b.n	800124e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	615a      	str	r2, [r3, #20]
          break;
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2bff      	cmp	r3, #255	; 0xff
 8001252:	d801      	bhi.n	8001258 <HAL_GPIO_Init+0xec>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	e001      	b.n	800125c <HAL_GPIO_Init+0xf0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3304      	adds	r3, #4
 800125c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2bff      	cmp	r3, #255	; 0xff
 8001262:	d802      	bhi.n	800126a <HAL_GPIO_Init+0xfe>
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x104>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3b08      	subs	r3, #8
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	210f      	movs	r1, #15
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	401a      	ands	r2, r3
 8001282:	6a39      	ldr	r1, [r7, #32]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8096 	beq.w	80013ca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800129e:	4b59      	ldr	r3, [pc, #356]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a58      	ldr	r2, [pc, #352]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_GPIO_Init+0x298>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b6:	4a54      	ldr	r2, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x29c>)
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x2a0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x19e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x2a4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x19a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_GPIO_Init+0x2a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x196>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_GPIO_Init+0x2ac>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x192>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 80012fe:	2304      	movs	r3, #4
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x1a0>
 800130a:	2300      	movs	r3, #0
 800130c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131c:	493a      	ldr	r1, [pc, #232]	; (8001408 <HAL_GPIO_Init+0x29c>)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4938      	ldr	r1, [pc, #224]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	43db      	mvns	r3, r3
 800134c:	4933      	ldr	r1, [pc, #204]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800134e:	4013      	ands	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	492e      	ldr	r1, [pc, #184]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	4929      	ldr	r1, [pc, #164]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001376:	4013      	ands	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	4924      	ldr	r1, [pc, #144]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	608b      	str	r3, [r1, #8]
 8001392:	e006      	b.n	80013a2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <HAL_GPIO_Init+0x2b0>)
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	43db      	mvns	r3, r3
 800139c:	491f      	ldr	r1, [pc, #124]	; (800141c <HAL_GPIO_Init+0x2b0>)
 800139e:	4013      	ands	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	491a      	ldr	r1, [pc, #104]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
 80013ba:	e006      	b.n	80013ca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4915      	ldr	r1, [pc, #84]	; (800141c <HAL_GPIO_Init+0x2b0>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	3301      	adds	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f aed0 	bne.w	8001180 <HAL_GPIO_Init+0x14>
  }
}
 80013e0:	bf00      	nop
 80013e2:	372c      	adds	r7, #44	; 0x2c
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	10210000 	.word	0x10210000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	10120000 	.word	0x10120000
 80013f8:	10310000 	.word	0x10310000
 80013fc:	10320000 	.word	0x10320000
 8001400:	10220000 	.word	0x10220000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	40010800 	.word	0x40010800
 8001410:	40010c00 	.word	0x40010c00
 8001414:	40011000 	.word	0x40011000
 8001418:	40011400 	.word	0x40011400
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	807b      	strh	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001464:	887a      	ldrh	r2, [r7, #2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800146a:	e003      	b.n	8001474 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	611a      	str	r2, [r3, #16]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f806 	bl	80014b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e10f      	b.n	80016f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fb66 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001508:	f001 fcb4 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a7b      	ldr	r2, [pc, #492]	; (8001700 <HAL_I2C_Init+0x23c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d807      	bhi.n	8001528 <HAL_I2C_Init+0x64>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a7a      	ldr	r2, [pc, #488]	; (8001704 <HAL_I2C_Init+0x240>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e006      	b.n	8001536 <HAL_I2C_Init+0x72>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_I2C_Init+0x244>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0db      	b.n	80016f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a72      	ldr	r2, [pc, #456]	; (800170c <HAL_I2C_Init+0x248>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a64      	ldr	r2, [pc, #400]	; (8001700 <HAL_I2C_Init+0x23c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d802      	bhi.n	8001578 <HAL_I2C_Init+0xb4>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	e009      	b.n	800158c <HAL_I2C_Init+0xc8>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a63      	ldr	r2, [pc, #396]	; (8001710 <HAL_I2C_Init+0x24c>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	430b      	orrs	r3, r1
 8001592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800159e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4956      	ldr	r1, [pc, #344]	; (8001700 <HAL_I2C_Init+0x23c>)
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d80d      	bhi.n	80015c8 <HAL_I2C_Init+0x104>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e59      	subs	r1, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	bf38      	it	cc
 80015c4:	2304      	movcc	r3, #4
 80015c6:	e04f      	b.n	8001668 <HAL_I2C_Init+0x1a4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <HAL_I2C_Init+0x130>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	e012      	b.n	800161a <HAL_I2C_Init+0x156>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_Init+0x15e>
 800161e:	2301      	movs	r3, #1
 8001620:	e022      	b.n	8001668 <HAL_I2C_Init+0x1a4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10e      	bne.n	8001648 <HAL_I2C_Init+0x184>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e58      	subs	r0, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	440b      	add	r3, r1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	3301      	adds	r3, #1
 800163e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001646:	e00f      	b.n	8001668 <HAL_I2C_Init+0x1a4>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	4313      	orrs	r3, r2
 800166e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69da      	ldr	r2, [r3, #28]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6911      	ldr	r1, [r2, #16]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	4311      	orrs	r1, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	000186a0 	.word	0x000186a0
 8001704:	001e847f 	.word	0x001e847f
 8001708:	003d08ff 	.word	0x003d08ff
 800170c:	431bde83 	.word	0x431bde83
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	461a      	mov	r2, r3
 8001720:	460b      	mov	r3, r1
 8001722:	817b      	strh	r3, [r7, #10]
 8001724:	4613      	mov	r3, r2
 8001726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fbe6 	bl	8000ef8 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	f040 80e0 	bne.w	80018fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2319      	movs	r3, #25
 8001742:	2201      	movs	r2, #1
 8001744:	4970      	ldr	r1, [pc, #448]	; (8001908 <HAL_I2C_Master_Transmit+0x1f4>)
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fde2 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
 8001754:	e0d3      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_I2C_Master_Transmit+0x50>
 8001760:	2302      	movs	r3, #2
 8001762:	e0cc      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d007      	beq.n	800178a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2221      	movs	r2, #33	; 0x21
 800179e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2210      	movs	r2, #16
 80017a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	893a      	ldrh	r2, [r7, #8]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_I2C_Master_Transmit+0x1f8>)
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fbcc 	bl	8001f70 <I2C_MasterRequestWrite>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e08d      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f8:	e066      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fe5c 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00d      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b04      	cmp	r3, #4
 8001810:	d107      	bne.n	8001822 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001820:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06b      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d11b      	bne.n	800189c <HAL_I2C_Master_Transmit+0x188>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	3b01      	subs	r3, #1
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fe4c 	bl	800253e <I2C_WaitOnBTFFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00d      	beq.n	80018c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01a      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d194      	bne.n	80017fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	00100002 	.word	0x00100002
 800190c:	ffff0000 	.word	0xffff0000

08001910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	460b      	mov	r3, r1
 8001924:	813b      	strh	r3, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800192a:	f7ff fae5 	bl	8000ef8 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	f040 80d9 	bne.w	8001af0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2319      	movs	r3, #25
 8001944:	2201      	movs	r2, #1
 8001946:	496d      	ldr	r1, [pc, #436]	; (8001afc <HAL_I2C_Mem_Write+0x1ec>)
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fce1 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
 8001956:	e0cc      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Mem_Write+0x56>
 8001962:	2302      	movs	r3, #2
 8001964:	e0c5      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d007      	beq.n	800198c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2221      	movs	r2, #33	; 0x21
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2240      	movs	r2, #64	; 0x40
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4a4d      	ldr	r2, [pc, #308]	; (8001b00 <HAL_I2C_Mem_Write+0x1f0>)
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ce:	88f8      	ldrh	r0, [r7, #6]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4603      	mov	r3, r0
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fb3c 	bl	800205c <I2C_RequestMemoryWrite>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d052      	beq.n	8001a90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e081      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fd62 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00d      	beq.n	8001a1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d11b      	bne.n	8001a90 <HAL_I2C_Mem_Write+0x180>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1aa      	bne.n	80019ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fd4e 	bl	800253e <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e016      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	00100002 	.word	0x00100002
 8001b00:	ffff0000 	.word	0xffff0000

08001b04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	817b      	strh	r3, [r7, #10]
 8001b16:	460b      	mov	r3, r1
 8001b18:	813b      	strh	r3, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b1e:	f7ff f9eb 	bl	8000ef8 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	f040 8218 	bne.w	8001f62 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2319      	movs	r3, #25
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4981      	ldr	r1, [pc, #516]	; (8001d40 <HAL_I2C_Mem_Read+0x23c>)
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fbe7 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e20b      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Mem_Read+0x56>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e204      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d007      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2222      	movs	r2, #34	; 0x22
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2240      	movs	r2, #64	; 0x40
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_I2C_Mem_Read+0x240>)
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc2:	88f8      	ldrh	r0, [r7, #6]
 8001bc4:	893a      	ldrh	r2, [r7, #8]
 8001bc6:	8979      	ldrh	r1, [r7, #10]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 facc 	bl	8002170 <I2C_RequestMemoryRead>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e1c0      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d113      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e194      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d11d      	bne.n	8001c56 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c28:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c52:	b662      	cpsie	i
 8001c54:	e172      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d11d      	bne.n	8001c9a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c96:	b662      	cpsie	i
 8001c98:	e150      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ca8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cc0:	e13c      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	f200 80f5 	bhi.w	8001eb6 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d123      	bne.n	8001d1c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fc71 	bl	80025c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e13d      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1a:	e10f      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d150      	bne.n	8001dc6 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <HAL_I2C_Mem_Read+0x244>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 faee 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e112      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
 8001d3e:	bf00      	nop
 8001d40:	00100002 	.word	0x00100002
 8001d44:	ffff0000 	.word	0xffff0000
 8001d48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d90:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dc4:	e0ba      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4967      	ldr	r1, [pc, #412]	; (8001f6c <HAL_I2C_Mem_Read+0x468>)
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fa9d 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0c1      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	494f      	ldr	r1, [pc, #316]	; (8001f6c <HAL_I2C_Mem_Read+0x468>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fa6e 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e092      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e80:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eb4:	e042      	b.n	8001f3c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fb80 	bl	80025c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e04c      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d118      	bne.n	8001f3c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f aebe 	bne.w	8001cc2 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	00010004 	.word	0x00010004

08001f70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d006      	beq.n	8001f9a <I2C_MasterRequestWrite+0x2a>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d003      	beq.n	8001f9a <I2C_MasterRequestWrite+0x2a>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f98:	d108      	bne.n	8001fac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00b      	b.n	8001fc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d107      	bne.n	8001fc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f99d 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e035      	b.n	800204c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe8:	d108      	bne.n	8001ffc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	e01b      	b.n	8002034 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ffc:	897b      	ldrh	r3, [r7, #10]
 8001ffe:	11db      	asrs	r3, r3, #7
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 0306 	and.w	r3, r3, #6
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f063 030f 	orn	r3, r3, #15
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	490e      	ldr	r1, [pc, #56]	; (8002054 <I2C_MasterRequestWrite+0xe4>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 f9cf 	bl	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e010      	b.n	800204c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800202a:	897b      	ldrh	r3, [r7, #10]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <I2C_MasterRequestWrite+0xe8>)
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f9bf 	bl	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	00010008 	.word	0x00010008
 8002058:	00010002 	.word	0x00010002

0800205c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af02      	add	r7, sp, #8
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	817b      	strh	r3, [r7, #10]
 800206e:	460b      	mov	r3, r1
 8002070:	813b      	strh	r3, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2200      	movs	r2, #0
 800208e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f93c 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e05f      	b.n	8002162 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	6a3a      	ldr	r2, [r7, #32]
 80020b6:	492d      	ldr	r1, [pc, #180]	; (800216c <I2C_RequestMemoryWrite+0x110>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f980 	bl	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e04c      	b.n	8002162 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e0:	6a39      	ldr	r1, [r7, #32]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f9ea 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d107      	bne.n	8002106 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002104:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e02b      	b.n	8002162 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002110:	893b      	ldrh	r3, [r7, #8]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]
 800211a:	e021      	b.n	8002160 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800211c:	893b      	ldrh	r3, [r7, #8]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	b29b      	uxth	r3, r3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f9c4 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	2b04      	cmp	r3, #4
 8002140:	d107      	bne.n	8002152 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e005      	b.n	8002162 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	00010002 	.word	0x00010002

08002170 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4603      	mov	r3, r0
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	460b      	mov	r3, r1
 8002184:	813b      	strh	r3, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f8aa 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e09e      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	6a3a      	ldr	r2, [r7, #32]
 80021da:	494c      	ldr	r1, [pc, #304]	; (800230c <I2C_RequestMemoryRead+0x19c>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f8ee 	bl	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e08b      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	6a39      	ldr	r1, [r7, #32]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f958 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00d      	beq.n	800222e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b04      	cmp	r3, #4
 8002218:	d107      	bne.n	800222a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06a      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002234:	893b      	ldrh	r3, [r7, #8]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	e021      	b.n	8002284 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002240:	893b      	ldrh	r3, [r7, #8]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b29b      	uxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f932 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b04      	cmp	r3, #4
 8002264:	d107      	bne.n	8002276 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e044      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f917 	bl	80024bc <I2C_WaitOnTXEFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b04      	cmp	r3, #4
 800229a:	d107      	bne.n	80022ac <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e029      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f81f 	bl	8002310 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e013      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022dc:	897b      	ldrh	r3, [r7, #10]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	6a3a      	ldr	r2, [r7, #32]
 80022f0:	4906      	ldr	r1, [pc, #24]	; (800230c <I2C_RequestMemoryRead+0x19c>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f863 	bl	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	00010002 	.word	0x00010002

08002310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002320:	e025      	b.n	800236e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d021      	beq.n	800236e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fde5 	bl	8000ef8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d116      	bne.n	800236e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0220 	orr.w	r2, r3, #32
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e023      	b.n	80023b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10d      	bne.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4013      	ands	r3, r2
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	e00c      	b.n	80023ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d0b6      	beq.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023cc:	e051      	b.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023dc:	d123      	bne.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e046      	b.n	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d021      	beq.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe fd63 	bl	8000ef8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d116      	bne.n	8002472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e020      	b.n	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10c      	bne.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4013      	ands	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	e00b      	b.n	80024ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d18d      	bne.n	80023ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c8:	e02d      	b.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f8ce 	bl	800266c <I2C_IsAcknowledgeFailed>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02d      	b.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d021      	beq.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7fe fd09 	bl	8000ef8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d116      	bne.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	d1ca      	bne.n	80024ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800254a:	e02d      	b.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f88d 	bl	800266c <I2C_IsAcknowledgeFailed>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e02d      	b.n	80025b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d021      	beq.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002564:	f7fe fcc8 	bl	8000ef8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	429a      	cmp	r2, r3
 8002572:	d302      	bcc.n	800257a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d1ca      	bne.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025cc:	e042      	b.n	8002654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d119      	bne.n	8002610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e029      	b.n	8002664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7fe fc72 	bl	8000ef8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e007      	b.n	8002664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d1b5      	bne.n	80025ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d11b      	bne.n	80026bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e26c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8087 	beq.w	80027f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d00c      	beq.n	800270e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f4:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d06c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x12c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d168      	bne.n	80027f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e246      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x76>
 8002730:	4b80      	ldr	r3, [pc, #512]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7f      	ldr	r2, [pc, #508]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e02e      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b78      	ldr	r3, [pc, #480]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a77      	ldr	r2, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0xbc>
 800276a:	4b72      	ldr	r3, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a71      	ldr	r2, [pc, #452]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b6f      	ldr	r3, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xd4>
 8002784:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6a      	ldr	r2, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a67      	ldr	r2, [pc, #412]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fba8 	bl	8000ef8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fba4 	bl	8000ef8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1fa      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xe4>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fb94 	bl	8000ef8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fb90 	bl	8000ef8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1e6      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x10c>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800280e:	4b49      	ldr	r3, [pc, #292]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11c      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1ba      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4939      	ldr	r1, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e03a      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_OscConfig+0x270>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fb49 	bl	8000ef8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe fb45 	bl	8000ef8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e19b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4927      	ldr	r1, [pc, #156]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_RCC_OscConfig+0x270>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fb28 	bl	8000ef8 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7fe fb24 	bl	8000ef8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e17a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d03a      	beq.n	800294c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d019      	beq.n	8002912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x274>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7fe fb08 	bl	8000ef8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe fb04 	bl	8000ef8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e15a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0x26c>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800290a:	2001      	movs	r0, #1
 800290c:	f000 fada 	bl	8002ec4 <RCC_Delay>
 8002910:	e01c      	b.n	800294c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_OscConfig+0x274>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7fe faee 	bl	8000ef8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291e:	e00f      	b.n	8002940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe faea 	bl	8000ef8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d908      	bls.n	8002940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e140      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	42420000 	.word	0x42420000
 800293c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b9e      	ldr	r3, [pc, #632]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e9      	bne.n	8002920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a6 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b97      	ldr	r3, [pc, #604]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b94      	ldr	r3, [pc, #592]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	4a93      	ldr	r2, [pc, #588]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	61d3      	str	r3, [r2, #28]
 8002976:	4b91      	ldr	r3, [pc, #580]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a8a      	ldr	r2, [pc, #552]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe faab 	bl	8000ef8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe faa7 	bl	8000ef8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b64      	cmp	r3, #100	; 0x64
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0fd      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x312>
 80029cc:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4a7a      	ldr	r2, [pc, #488]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6213      	str	r3, [r2, #32]
 80029d8:	e02d      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x334>
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6213      	str	r3, [r2, #32]
 80029ee:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a72      	ldr	r2, [pc, #456]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	e01c      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCC_OscConfig+0x356>
 8002a04:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4a6c      	ldr	r2, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6213      	str	r3, [r2, #32]
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a69      	ldr	r2, [pc, #420]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e00b      	b.n	8002a36 <HAL_RCC_OscConfig+0x36e>
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a66      	ldr	r2, [pc, #408]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d015      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fa5b 	bl	8000ef8 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fa57 	bl	8000ef8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e0ab      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ee      	beq.n	8002a46 <HAL_RCC_OscConfig+0x37e>
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fa45 	bl	8000ef8 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fa41 	bl	8000ef8 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e095      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	4b4c      	ldr	r3, [pc, #304]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ee      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9a:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8081 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d061      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d146      	bne.n	8002b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x4fc>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fa15 	bl	8000ef8 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fa11 	bl	8000ef8 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e067      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	492d      	ldr	r1, [pc, #180]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a19      	ldr	r1, [r3, #32]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x4fc>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f9e5 	bl	8000ef8 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f9e1 	bl	8000ef8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e037      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x46a>
 8002b50:	e02f      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_RCC_OscConfig+0x4fc>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f9ce 	bl	8000ef8 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f9ca 	bl	8000ef8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e020      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x498>
 8002b7e:	e018      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e013      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42420060 	.word	0x42420060

08002bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0d0      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d910      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	4965      	ldr	r1, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d040      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d115      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e073      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06b      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4936      	ldr	r1, [pc, #216]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe f91e 	bl	8000ef8 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe f91a 	bl	8000ef8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e053      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d210      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 0207 	bic.w	r2, r3, #7
 8002cfe:	4922      	ldr	r1, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	5cd3      	ldrb	r3, [r2, r3]
 8002d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1cc>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1d0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f87c 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08003a5c 	.word	0x08003a5c
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b490      	push	{r4, r7}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002da4:	1d3c      	adds	r4, r7, #4
 8002da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d002      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x40>
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x46>
 8002dda:	e02d      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dde:	623b      	str	r3, [r7, #32]
      break;
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	0c9b      	lsrs	r3, r3, #18
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dee:	4413      	add	r3, r2
 8002df0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002df4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	0c5b      	lsrs	r3, r3, #17
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e0e:	4413      	add	r3, r2
 8002e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e1a:	fb02 f203 	mul.w	r2, r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	623b      	str	r3, [r7, #32]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e3a:	623b      	str	r3, [r7, #32]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc90      	pop	{r4, r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	08003a48 	.word	0x08003a48
 8002e50:	08003a58 	.word	0x08003a58
 8002e54:	40021000 	.word	0x40021000
 8002e58:	007a1200 	.word	0x007a1200
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000000 	.word	0x20000000

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e78:	f7ff fff2 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4a03      	ldr	r2, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08003a6c 	.word	0x08003a6c

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4601      	mov	r1, r0
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0adb      	lsrs	r3, r3, #11
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08003a6c 	.word	0x08003a6c

08002ec4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCC_Delay+0x34>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <RCC_Delay+0x38>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0a5b      	lsrs	r3, r3, #9
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee0:	bf00      	nop
  }
  while (Delay --);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	60fa      	str	r2, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <RCC_Delay+0x1c>
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	10624dd3 	.word	0x10624dd3

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03f      	b.n	8002f92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fe98 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f829 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fd6:	f023 030c 	bic.w	r3, r3, #12
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a52      	ldr	r2, [pc, #328]	; (8003148 <UART_SetConfig+0x1ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d14e      	bne.n	80030a2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff ff4a 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8003008:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4a4a      	ldr	r2, [pc, #296]	; (800314c <UART_SetConfig+0x1b0>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	0119      	lsls	r1, r3, #4
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003040:	4b42      	ldr	r3, [pc, #264]	; (800314c <UART_SetConfig+0x1b0>)
 8003042:	fba3 0302 	umull	r0, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2064      	movs	r0, #100	; 0x64
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a3d      	ldr	r2, [pc, #244]	; (800314c <UART_SetConfig+0x1b0>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003060:	4419      	add	r1, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009a      	lsls	r2, r3, #2
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fbb2 f2f3 	udiv	r2, r2, r3
 8003078:	4b34      	ldr	r3, [pc, #208]	; (800314c <UART_SetConfig+0x1b0>)
 800307a:	fba3 0302 	umull	r0, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2064      	movs	r0, #100	; 0x64
 8003082:	fb00 f303 	mul.w	r3, r0, r3
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	3332      	adds	r3, #50	; 0x32
 800308c:	4a2f      	ldr	r2, [pc, #188]	; (800314c <UART_SetConfig+0x1b0>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	440a      	add	r2, r1
 800309e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80030a0:	e04d      	b.n	800313e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff fee7 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80030a6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009a      	lsls	r2, r3, #2
 80030b2:	441a      	add	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	4a23      	ldr	r2, [pc, #140]	; (800314c <UART_SetConfig+0x1b0>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	0119      	lsls	r1, r3, #4
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	fbb2 f2f3 	udiv	r2, r2, r3
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <UART_SetConfig+0x1b0>)
 80030e0:	fba3 0302 	umull	r0, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2064      	movs	r0, #100	; 0x64
 80030e8:	fb00 f303 	mul.w	r3, r0, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <UART_SetConfig+0x1b0>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fe:	4419      	add	r1, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	441a      	add	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	fbb2 f2f3 	udiv	r2, r2, r3
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <UART_SetConfig+0x1b0>)
 8003118:	fba3 0302 	umull	r0, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2064      	movs	r0, #100	; 0x64
 8003120:	fb00 f303 	mul.w	r3, r0, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <UART_SetConfig+0x1b0>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 020f 	and.w	r2, r3, #15
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	440a      	add	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40013800 	.word	0x40013800
 800314c:	51eb851f 	.word	0x51eb851f

08003150 <__errno>:
 8003150:	4b01      	ldr	r3, [pc, #4]	; (8003158 <__errno+0x8>)
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	2000000c 	.word	0x2000000c

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	2500      	movs	r5, #0
 8003160:	4e0c      	ldr	r6, [pc, #48]	; (8003194 <__libc_init_array+0x38>)
 8003162:	4c0d      	ldr	r4, [pc, #52]	; (8003198 <__libc_init_array+0x3c>)
 8003164:	1ba4      	subs	r4, r4, r6
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	42a5      	cmp	r5, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	f000 fc34 	bl	80039d8 <_init>
 8003170:	2500      	movs	r5, #0
 8003172:	4e0a      	ldr	r6, [pc, #40]	; (800319c <__libc_init_array+0x40>)
 8003174:	4c0a      	ldr	r4, [pc, #40]	; (80031a0 <__libc_init_array+0x44>)
 8003176:	1ba4      	subs	r4, r4, r6
 8003178:	10a4      	asrs	r4, r4, #2
 800317a:	42a5      	cmp	r5, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003184:	4798      	blx	r3
 8003186:	3501      	adds	r5, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800318e:	4798      	blx	r3
 8003190:	3501      	adds	r5, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	08003aa8 	.word	0x08003aa8
 8003198:	08003aa8 	.word	0x08003aa8
 800319c:	08003aa8 	.word	0x08003aa8
 80031a0:	08003aac 	.word	0x08003aac

080031a4 <memset>:
 80031a4:	4603      	mov	r3, r0
 80031a6:	4402      	add	r2, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d100      	bne.n	80031ae <memset+0xa>
 80031ac:	4770      	bx	lr
 80031ae:	f803 1b01 	strb.w	r1, [r3], #1
 80031b2:	e7f9      	b.n	80031a8 <memset+0x4>

080031b4 <siprintf>:
 80031b4:	b40e      	push	{r1, r2, r3}
 80031b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031ba:	b500      	push	{lr}
 80031bc:	b09c      	sub	sp, #112	; 0x70
 80031be:	ab1d      	add	r3, sp, #116	; 0x74
 80031c0:	9002      	str	r0, [sp, #8]
 80031c2:	9006      	str	r0, [sp, #24]
 80031c4:	9107      	str	r1, [sp, #28]
 80031c6:	9104      	str	r1, [sp, #16]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <siprintf+0x38>)
 80031ca:	4909      	ldr	r1, [pc, #36]	; (80031f0 <siprintf+0x3c>)
 80031cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80031d0:	9105      	str	r1, [sp, #20]
 80031d2:	6800      	ldr	r0, [r0, #0]
 80031d4:	a902      	add	r1, sp, #8
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	f000 f866 	bl	80032a8 <_svfiprintf_r>
 80031dc:	2200      	movs	r2, #0
 80031de:	9b02      	ldr	r3, [sp, #8]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	b01c      	add	sp, #112	; 0x70
 80031e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e8:	b003      	add	sp, #12
 80031ea:	4770      	bx	lr
 80031ec:	2000000c 	.word	0x2000000c
 80031f0:	ffff0208 	.word	0xffff0208

080031f4 <__ssputs_r>:
 80031f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f8:	688e      	ldr	r6, [r1, #8]
 80031fa:	4682      	mov	sl, r0
 80031fc:	429e      	cmp	r6, r3
 80031fe:	460c      	mov	r4, r1
 8003200:	4690      	mov	r8, r2
 8003202:	4699      	mov	r9, r3
 8003204:	d837      	bhi.n	8003276 <__ssputs_r+0x82>
 8003206:	898a      	ldrh	r2, [r1, #12]
 8003208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800320c:	d031      	beq.n	8003272 <__ssputs_r+0x7e>
 800320e:	2302      	movs	r3, #2
 8003210:	6825      	ldr	r5, [r4, #0]
 8003212:	6909      	ldr	r1, [r1, #16]
 8003214:	1a6f      	subs	r7, r5, r1
 8003216:	6965      	ldr	r5, [r4, #20]
 8003218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800321c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003220:	f109 0301 	add.w	r3, r9, #1
 8003224:	443b      	add	r3, r7
 8003226:	429d      	cmp	r5, r3
 8003228:	bf38      	it	cc
 800322a:	461d      	movcc	r5, r3
 800322c:	0553      	lsls	r3, r2, #21
 800322e:	d530      	bpl.n	8003292 <__ssputs_r+0x9e>
 8003230:	4629      	mov	r1, r5
 8003232:	f000 fb37 	bl	80038a4 <_malloc_r>
 8003236:	4606      	mov	r6, r0
 8003238:	b950      	cbnz	r0, 8003250 <__ssputs_r+0x5c>
 800323a:	230c      	movs	r3, #12
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f8ca 3000 	str.w	r3, [sl]
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324a:	81a3      	strh	r3, [r4, #12]
 800324c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003250:	463a      	mov	r2, r7
 8003252:	6921      	ldr	r1, [r4, #16]
 8003254:	f000 fab6 	bl	80037c4 <memcpy>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800325e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003262:	81a3      	strh	r3, [r4, #12]
 8003264:	6126      	str	r6, [r4, #16]
 8003266:	443e      	add	r6, r7
 8003268:	6026      	str	r6, [r4, #0]
 800326a:	464e      	mov	r6, r9
 800326c:	6165      	str	r5, [r4, #20]
 800326e:	1bed      	subs	r5, r5, r7
 8003270:	60a5      	str	r5, [r4, #8]
 8003272:	454e      	cmp	r6, r9
 8003274:	d900      	bls.n	8003278 <__ssputs_r+0x84>
 8003276:	464e      	mov	r6, r9
 8003278:	4632      	mov	r2, r6
 800327a:	4641      	mov	r1, r8
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	f000 faac 	bl	80037da <memmove>
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	2000      	movs	r0, #0
 8003286:	1b9b      	subs	r3, r3, r6
 8003288:	60a3      	str	r3, [r4, #8]
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	441e      	add	r6, r3
 800328e:	6026      	str	r6, [r4, #0]
 8003290:	e7dc      	b.n	800324c <__ssputs_r+0x58>
 8003292:	462a      	mov	r2, r5
 8003294:	f000 fb60 	bl	8003958 <_realloc_r>
 8003298:	4606      	mov	r6, r0
 800329a:	2800      	cmp	r0, #0
 800329c:	d1e2      	bne.n	8003264 <__ssputs_r+0x70>
 800329e:	6921      	ldr	r1, [r4, #16]
 80032a0:	4650      	mov	r0, sl
 80032a2:	f000 fab3 	bl	800380c <_free_r>
 80032a6:	e7c8      	b.n	800323a <__ssputs_r+0x46>

080032a8 <_svfiprintf_r>:
 80032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	461d      	mov	r5, r3
 80032ae:	898b      	ldrh	r3, [r1, #12]
 80032b0:	b09d      	sub	sp, #116	; 0x74
 80032b2:	061f      	lsls	r7, r3, #24
 80032b4:	4680      	mov	r8, r0
 80032b6:	460c      	mov	r4, r1
 80032b8:	4616      	mov	r6, r2
 80032ba:	d50f      	bpl.n	80032dc <_svfiprintf_r+0x34>
 80032bc:	690b      	ldr	r3, [r1, #16]
 80032be:	b96b      	cbnz	r3, 80032dc <_svfiprintf_r+0x34>
 80032c0:	2140      	movs	r1, #64	; 0x40
 80032c2:	f000 faef 	bl	80038a4 <_malloc_r>
 80032c6:	6020      	str	r0, [r4, #0]
 80032c8:	6120      	str	r0, [r4, #16]
 80032ca:	b928      	cbnz	r0, 80032d8 <_svfiprintf_r+0x30>
 80032cc:	230c      	movs	r3, #12
 80032ce:	f8c8 3000 	str.w	r3, [r8]
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	e0c8      	b.n	800346a <_svfiprintf_r+0x1c2>
 80032d8:	2340      	movs	r3, #64	; 0x40
 80032da:	6163      	str	r3, [r4, #20]
 80032dc:	2300      	movs	r3, #0
 80032de:	9309      	str	r3, [sp, #36]	; 0x24
 80032e0:	2320      	movs	r3, #32
 80032e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032e6:	2330      	movs	r3, #48	; 0x30
 80032e8:	f04f 0b01 	mov.w	fp, #1
 80032ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032f0:	9503      	str	r5, [sp, #12]
 80032f2:	4637      	mov	r7, r6
 80032f4:	463d      	mov	r5, r7
 80032f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032fa:	b10b      	cbz	r3, 8003300 <_svfiprintf_r+0x58>
 80032fc:	2b25      	cmp	r3, #37	; 0x25
 80032fe:	d13e      	bne.n	800337e <_svfiprintf_r+0xd6>
 8003300:	ebb7 0a06 	subs.w	sl, r7, r6
 8003304:	d00b      	beq.n	800331e <_svfiprintf_r+0x76>
 8003306:	4653      	mov	r3, sl
 8003308:	4632      	mov	r2, r6
 800330a:	4621      	mov	r1, r4
 800330c:	4640      	mov	r0, r8
 800330e:	f7ff ff71 	bl	80031f4 <__ssputs_r>
 8003312:	3001      	adds	r0, #1
 8003314:	f000 80a4 	beq.w	8003460 <_svfiprintf_r+0x1b8>
 8003318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800331a:	4453      	add	r3, sl
 800331c:	9309      	str	r3, [sp, #36]	; 0x24
 800331e:	783b      	ldrb	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 809d 	beq.w	8003460 <_svfiprintf_r+0x1b8>
 8003326:	2300      	movs	r3, #0
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003330:	9304      	str	r3, [sp, #16]
 8003332:	9307      	str	r3, [sp, #28]
 8003334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003338:	931a      	str	r3, [sp, #104]	; 0x68
 800333a:	462f      	mov	r7, r5
 800333c:	2205      	movs	r2, #5
 800333e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003342:	4850      	ldr	r0, [pc, #320]	; (8003484 <_svfiprintf_r+0x1dc>)
 8003344:	f000 fa30 	bl	80037a8 <memchr>
 8003348:	9b04      	ldr	r3, [sp, #16]
 800334a:	b9d0      	cbnz	r0, 8003382 <_svfiprintf_r+0xda>
 800334c:	06d9      	lsls	r1, r3, #27
 800334e:	bf44      	itt	mi
 8003350:	2220      	movmi	r2, #32
 8003352:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003356:	071a      	lsls	r2, r3, #28
 8003358:	bf44      	itt	mi
 800335a:	222b      	movmi	r2, #43	; 0x2b
 800335c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003360:	782a      	ldrb	r2, [r5, #0]
 8003362:	2a2a      	cmp	r2, #42	; 0x2a
 8003364:	d015      	beq.n	8003392 <_svfiprintf_r+0xea>
 8003366:	462f      	mov	r7, r5
 8003368:	2000      	movs	r0, #0
 800336a:	250a      	movs	r5, #10
 800336c:	9a07      	ldr	r2, [sp, #28]
 800336e:	4639      	mov	r1, r7
 8003370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003374:	3b30      	subs	r3, #48	; 0x30
 8003376:	2b09      	cmp	r3, #9
 8003378:	d94d      	bls.n	8003416 <_svfiprintf_r+0x16e>
 800337a:	b1b8      	cbz	r0, 80033ac <_svfiprintf_r+0x104>
 800337c:	e00f      	b.n	800339e <_svfiprintf_r+0xf6>
 800337e:	462f      	mov	r7, r5
 8003380:	e7b8      	b.n	80032f4 <_svfiprintf_r+0x4c>
 8003382:	4a40      	ldr	r2, [pc, #256]	; (8003484 <_svfiprintf_r+0x1dc>)
 8003384:	463d      	mov	r5, r7
 8003386:	1a80      	subs	r0, r0, r2
 8003388:	fa0b f000 	lsl.w	r0, fp, r0
 800338c:	4318      	orrs	r0, r3
 800338e:	9004      	str	r0, [sp, #16]
 8003390:	e7d3      	b.n	800333a <_svfiprintf_r+0x92>
 8003392:	9a03      	ldr	r2, [sp, #12]
 8003394:	1d11      	adds	r1, r2, #4
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	9103      	str	r1, [sp, #12]
 800339a:	2a00      	cmp	r2, #0
 800339c:	db01      	blt.n	80033a2 <_svfiprintf_r+0xfa>
 800339e:	9207      	str	r2, [sp, #28]
 80033a0:	e004      	b.n	80033ac <_svfiprintf_r+0x104>
 80033a2:	4252      	negs	r2, r2
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	9207      	str	r2, [sp, #28]
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	783b      	ldrb	r3, [r7, #0]
 80033ae:	2b2e      	cmp	r3, #46	; 0x2e
 80033b0:	d10c      	bne.n	80033cc <_svfiprintf_r+0x124>
 80033b2:	787b      	ldrb	r3, [r7, #1]
 80033b4:	2b2a      	cmp	r3, #42	; 0x2a
 80033b6:	d133      	bne.n	8003420 <_svfiprintf_r+0x178>
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	3702      	adds	r7, #2
 80033bc:	1d1a      	adds	r2, r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	9203      	str	r2, [sp, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bfb8      	it	lt
 80033c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80033ca:	9305      	str	r3, [sp, #20]
 80033cc:	4d2e      	ldr	r5, [pc, #184]	; (8003488 <_svfiprintf_r+0x1e0>)
 80033ce:	2203      	movs	r2, #3
 80033d0:	7839      	ldrb	r1, [r7, #0]
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 f9e8 	bl	80037a8 <memchr>
 80033d8:	b138      	cbz	r0, 80033ea <_svfiprintf_r+0x142>
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	1b40      	subs	r0, r0, r5
 80033de:	fa03 f000 	lsl.w	r0, r3, r0
 80033e2:	9b04      	ldr	r3, [sp, #16]
 80033e4:	3701      	adds	r7, #1
 80033e6:	4303      	orrs	r3, r0
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	7839      	ldrb	r1, [r7, #0]
 80033ec:	2206      	movs	r2, #6
 80033ee:	4827      	ldr	r0, [pc, #156]	; (800348c <_svfiprintf_r+0x1e4>)
 80033f0:	1c7e      	adds	r6, r7, #1
 80033f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033f6:	f000 f9d7 	bl	80037a8 <memchr>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d038      	beq.n	8003470 <_svfiprintf_r+0x1c8>
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <_svfiprintf_r+0x1e8>)
 8003400:	bb13      	cbnz	r3, 8003448 <_svfiprintf_r+0x1a0>
 8003402:	9b03      	ldr	r3, [sp, #12]
 8003404:	3307      	adds	r3, #7
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	3308      	adds	r3, #8
 800340c:	9303      	str	r3, [sp, #12]
 800340e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003410:	444b      	add	r3, r9
 8003412:	9309      	str	r3, [sp, #36]	; 0x24
 8003414:	e76d      	b.n	80032f2 <_svfiprintf_r+0x4a>
 8003416:	fb05 3202 	mla	r2, r5, r2, r3
 800341a:	2001      	movs	r0, #1
 800341c:	460f      	mov	r7, r1
 800341e:	e7a6      	b.n	800336e <_svfiprintf_r+0xc6>
 8003420:	2300      	movs	r3, #0
 8003422:	250a      	movs	r5, #10
 8003424:	4619      	mov	r1, r3
 8003426:	3701      	adds	r7, #1
 8003428:	9305      	str	r3, [sp, #20]
 800342a:	4638      	mov	r0, r7
 800342c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003430:	3a30      	subs	r2, #48	; 0x30
 8003432:	2a09      	cmp	r2, #9
 8003434:	d903      	bls.n	800343e <_svfiprintf_r+0x196>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0c8      	beq.n	80033cc <_svfiprintf_r+0x124>
 800343a:	9105      	str	r1, [sp, #20]
 800343c:	e7c6      	b.n	80033cc <_svfiprintf_r+0x124>
 800343e:	fb05 2101 	mla	r1, r5, r1, r2
 8003442:	2301      	movs	r3, #1
 8003444:	4607      	mov	r7, r0
 8003446:	e7f0      	b.n	800342a <_svfiprintf_r+0x182>
 8003448:	ab03      	add	r3, sp, #12
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4622      	mov	r2, r4
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <_svfiprintf_r+0x1ec>)
 8003450:	a904      	add	r1, sp, #16
 8003452:	4640      	mov	r0, r8
 8003454:	f3af 8000 	nop.w
 8003458:	f1b0 3fff 	cmp.w	r0, #4294967295
 800345c:	4681      	mov	r9, r0
 800345e:	d1d6      	bne.n	800340e <_svfiprintf_r+0x166>
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	065b      	lsls	r3, r3, #25
 8003464:	f53f af35 	bmi.w	80032d2 <_svfiprintf_r+0x2a>
 8003468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800346a:	b01d      	add	sp, #116	; 0x74
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003470:	ab03      	add	r3, sp, #12
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4622      	mov	r2, r4
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <_svfiprintf_r+0x1ec>)
 8003478:	a904      	add	r1, sp, #16
 800347a:	4640      	mov	r0, r8
 800347c:	f000 f882 	bl	8003584 <_printf_i>
 8003480:	e7ea      	b.n	8003458 <_svfiprintf_r+0x1b0>
 8003482:	bf00      	nop
 8003484:	08003a74 	.word	0x08003a74
 8003488:	08003a7a 	.word	0x08003a7a
 800348c:	08003a7e 	.word	0x08003a7e
 8003490:	00000000 	.word	0x00000000
 8003494:	080031f5 	.word	0x080031f5

08003498 <_printf_common>:
 8003498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	4691      	mov	r9, r2
 800349e:	461f      	mov	r7, r3
 80034a0:	688a      	ldr	r2, [r1, #8]
 80034a2:	690b      	ldr	r3, [r1, #16]
 80034a4:	4606      	mov	r6, r0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bfb8      	it	lt
 80034aa:	4613      	movlt	r3, r2
 80034ac:	f8c9 3000 	str.w	r3, [r9]
 80034b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034b4:	460c      	mov	r4, r1
 80034b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034ba:	b112      	cbz	r2, 80034c2 <_printf_common+0x2a>
 80034bc:	3301      	adds	r3, #1
 80034be:	f8c9 3000 	str.w	r3, [r9]
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	0699      	lsls	r1, r3, #26
 80034c6:	bf42      	ittt	mi
 80034c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80034cc:	3302      	addmi	r3, #2
 80034ce:	f8c9 3000 	strmi.w	r3, [r9]
 80034d2:	6825      	ldr	r5, [r4, #0]
 80034d4:	f015 0506 	ands.w	r5, r5, #6
 80034d8:	d107      	bne.n	80034ea <_printf_common+0x52>
 80034da:	f104 0a19 	add.w	sl, r4, #25
 80034de:	68e3      	ldr	r3, [r4, #12]
 80034e0:	f8d9 2000 	ldr.w	r2, [r9]
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	42ab      	cmp	r3, r5
 80034e8:	dc29      	bgt.n	800353e <_printf_common+0xa6>
 80034ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	3300      	adds	r3, #0
 80034f2:	bf18      	it	ne
 80034f4:	2301      	movne	r3, #1
 80034f6:	0692      	lsls	r2, r2, #26
 80034f8:	d42e      	bmi.n	8003558 <_printf_common+0xc0>
 80034fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034fe:	4639      	mov	r1, r7
 8003500:	4630      	mov	r0, r6
 8003502:	47c0      	blx	r8
 8003504:	3001      	adds	r0, #1
 8003506:	d021      	beq.n	800354c <_printf_common+0xb4>
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	68e5      	ldr	r5, [r4, #12]
 800350c:	f003 0306 	and.w	r3, r3, #6
 8003510:	2b04      	cmp	r3, #4
 8003512:	bf18      	it	ne
 8003514:	2500      	movne	r5, #0
 8003516:	f8d9 2000 	ldr.w	r2, [r9]
 800351a:	f04f 0900 	mov.w	r9, #0
 800351e:	bf08      	it	eq
 8003520:	1aad      	subeq	r5, r5, r2
 8003522:	68a3      	ldr	r3, [r4, #8]
 8003524:	6922      	ldr	r2, [r4, #16]
 8003526:	bf08      	it	eq
 8003528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800352c:	4293      	cmp	r3, r2
 800352e:	bfc4      	itt	gt
 8003530:	1a9b      	subgt	r3, r3, r2
 8003532:	18ed      	addgt	r5, r5, r3
 8003534:	341a      	adds	r4, #26
 8003536:	454d      	cmp	r5, r9
 8003538:	d11a      	bne.n	8003570 <_printf_common+0xd8>
 800353a:	2000      	movs	r0, #0
 800353c:	e008      	b.n	8003550 <_printf_common+0xb8>
 800353e:	2301      	movs	r3, #1
 8003540:	4652      	mov	r2, sl
 8003542:	4639      	mov	r1, r7
 8003544:	4630      	mov	r0, r6
 8003546:	47c0      	blx	r8
 8003548:	3001      	adds	r0, #1
 800354a:	d103      	bne.n	8003554 <_printf_common+0xbc>
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003554:	3501      	adds	r5, #1
 8003556:	e7c2      	b.n	80034de <_printf_common+0x46>
 8003558:	2030      	movs	r0, #48	; 0x30
 800355a:	18e1      	adds	r1, r4, r3
 800355c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003566:	4422      	add	r2, r4
 8003568:	3302      	adds	r3, #2
 800356a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800356e:	e7c4      	b.n	80034fa <_printf_common+0x62>
 8003570:	2301      	movs	r3, #1
 8003572:	4622      	mov	r2, r4
 8003574:	4639      	mov	r1, r7
 8003576:	4630      	mov	r0, r6
 8003578:	47c0      	blx	r8
 800357a:	3001      	adds	r0, #1
 800357c:	d0e6      	beq.n	800354c <_printf_common+0xb4>
 800357e:	f109 0901 	add.w	r9, r9, #1
 8003582:	e7d8      	b.n	8003536 <_printf_common+0x9e>

08003584 <_printf_i>:
 8003584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003588:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800358c:	460c      	mov	r4, r1
 800358e:	7e09      	ldrb	r1, [r1, #24]
 8003590:	b085      	sub	sp, #20
 8003592:	296e      	cmp	r1, #110	; 0x6e
 8003594:	4617      	mov	r7, r2
 8003596:	4606      	mov	r6, r0
 8003598:	4698      	mov	r8, r3
 800359a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800359c:	f000 80b3 	beq.w	8003706 <_printf_i+0x182>
 80035a0:	d822      	bhi.n	80035e8 <_printf_i+0x64>
 80035a2:	2963      	cmp	r1, #99	; 0x63
 80035a4:	d036      	beq.n	8003614 <_printf_i+0x90>
 80035a6:	d80a      	bhi.n	80035be <_printf_i+0x3a>
 80035a8:	2900      	cmp	r1, #0
 80035aa:	f000 80b9 	beq.w	8003720 <_printf_i+0x19c>
 80035ae:	2958      	cmp	r1, #88	; 0x58
 80035b0:	f000 8083 	beq.w	80036ba <_printf_i+0x136>
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80035bc:	e032      	b.n	8003624 <_printf_i+0xa0>
 80035be:	2964      	cmp	r1, #100	; 0x64
 80035c0:	d001      	beq.n	80035c6 <_printf_i+0x42>
 80035c2:	2969      	cmp	r1, #105	; 0x69
 80035c4:	d1f6      	bne.n	80035b4 <_printf_i+0x30>
 80035c6:	6820      	ldr	r0, [r4, #0]
 80035c8:	6813      	ldr	r3, [r2, #0]
 80035ca:	0605      	lsls	r5, r0, #24
 80035cc:	f103 0104 	add.w	r1, r3, #4
 80035d0:	d52a      	bpl.n	8003628 <_printf_i+0xa4>
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6011      	str	r1, [r2, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da03      	bge.n	80035e2 <_printf_i+0x5e>
 80035da:	222d      	movs	r2, #45	; 0x2d
 80035dc:	425b      	negs	r3, r3
 80035de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80035e2:	486f      	ldr	r0, [pc, #444]	; (80037a0 <_printf_i+0x21c>)
 80035e4:	220a      	movs	r2, #10
 80035e6:	e039      	b.n	800365c <_printf_i+0xd8>
 80035e8:	2973      	cmp	r1, #115	; 0x73
 80035ea:	f000 809d 	beq.w	8003728 <_printf_i+0x1a4>
 80035ee:	d808      	bhi.n	8003602 <_printf_i+0x7e>
 80035f0:	296f      	cmp	r1, #111	; 0x6f
 80035f2:	d020      	beq.n	8003636 <_printf_i+0xb2>
 80035f4:	2970      	cmp	r1, #112	; 0x70
 80035f6:	d1dd      	bne.n	80035b4 <_printf_i+0x30>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f043 0320 	orr.w	r3, r3, #32
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	e003      	b.n	800360a <_printf_i+0x86>
 8003602:	2975      	cmp	r1, #117	; 0x75
 8003604:	d017      	beq.n	8003636 <_printf_i+0xb2>
 8003606:	2978      	cmp	r1, #120	; 0x78
 8003608:	d1d4      	bne.n	80035b4 <_printf_i+0x30>
 800360a:	2378      	movs	r3, #120	; 0x78
 800360c:	4865      	ldr	r0, [pc, #404]	; (80037a4 <_printf_i+0x220>)
 800360e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003612:	e055      	b.n	80036c0 <_printf_i+0x13c>
 8003614:	6813      	ldr	r3, [r2, #0]
 8003616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800361a:	1d19      	adds	r1, r3, #4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6011      	str	r1, [r2, #0]
 8003620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003624:	2301      	movs	r3, #1
 8003626:	e08c      	b.n	8003742 <_printf_i+0x1be>
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800362e:	6011      	str	r1, [r2, #0]
 8003630:	bf18      	it	ne
 8003632:	b21b      	sxthne	r3, r3
 8003634:	e7cf      	b.n	80035d6 <_printf_i+0x52>
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	6825      	ldr	r5, [r4, #0]
 800363a:	1d18      	adds	r0, r3, #4
 800363c:	6010      	str	r0, [r2, #0]
 800363e:	0628      	lsls	r0, r5, #24
 8003640:	d501      	bpl.n	8003646 <_printf_i+0xc2>
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	e002      	b.n	800364c <_printf_i+0xc8>
 8003646:	0668      	lsls	r0, r5, #25
 8003648:	d5fb      	bpl.n	8003642 <_printf_i+0xbe>
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	296f      	cmp	r1, #111	; 0x6f
 800364e:	bf14      	ite	ne
 8003650:	220a      	movne	r2, #10
 8003652:	2208      	moveq	r2, #8
 8003654:	4852      	ldr	r0, [pc, #328]	; (80037a0 <_printf_i+0x21c>)
 8003656:	2100      	movs	r1, #0
 8003658:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800365c:	6865      	ldr	r5, [r4, #4]
 800365e:	2d00      	cmp	r5, #0
 8003660:	60a5      	str	r5, [r4, #8]
 8003662:	f2c0 8095 	blt.w	8003790 <_printf_i+0x20c>
 8003666:	6821      	ldr	r1, [r4, #0]
 8003668:	f021 0104 	bic.w	r1, r1, #4
 800366c:	6021      	str	r1, [r4, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d13d      	bne.n	80036ee <_printf_i+0x16a>
 8003672:	2d00      	cmp	r5, #0
 8003674:	f040 808e 	bne.w	8003794 <_printf_i+0x210>
 8003678:	4665      	mov	r5, ip
 800367a:	2a08      	cmp	r2, #8
 800367c:	d10b      	bne.n	8003696 <_printf_i+0x112>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	07db      	lsls	r3, r3, #31
 8003682:	d508      	bpl.n	8003696 <_printf_i+0x112>
 8003684:	6923      	ldr	r3, [r4, #16]
 8003686:	6862      	ldr	r2, [r4, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	bfde      	ittt	le
 800368c:	2330      	movle	r3, #48	; 0x30
 800368e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003692:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003696:	ebac 0305 	sub.w	r3, ip, r5
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	f8cd 8000 	str.w	r8, [sp]
 80036a0:	463b      	mov	r3, r7
 80036a2:	aa03      	add	r2, sp, #12
 80036a4:	4621      	mov	r1, r4
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7ff fef6 	bl	8003498 <_printf_common>
 80036ac:	3001      	adds	r0, #1
 80036ae:	d14d      	bne.n	800374c <_printf_i+0x1c8>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	b005      	add	sp, #20
 80036b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036ba:	4839      	ldr	r0, [pc, #228]	; (80037a0 <_printf_i+0x21c>)
 80036bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80036c0:	6813      	ldr	r3, [r2, #0]
 80036c2:	6821      	ldr	r1, [r4, #0]
 80036c4:	1d1d      	adds	r5, r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6015      	str	r5, [r2, #0]
 80036ca:	060a      	lsls	r2, r1, #24
 80036cc:	d50b      	bpl.n	80036e6 <_printf_i+0x162>
 80036ce:	07ca      	lsls	r2, r1, #31
 80036d0:	bf44      	itt	mi
 80036d2:	f041 0120 	orrmi.w	r1, r1, #32
 80036d6:	6021      	strmi	r1, [r4, #0]
 80036d8:	b91b      	cbnz	r3, 80036e2 <_printf_i+0x15e>
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	f022 0220 	bic.w	r2, r2, #32
 80036e0:	6022      	str	r2, [r4, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	e7b7      	b.n	8003656 <_printf_i+0xd2>
 80036e6:	064d      	lsls	r5, r1, #25
 80036e8:	bf48      	it	mi
 80036ea:	b29b      	uxthmi	r3, r3
 80036ec:	e7ef      	b.n	80036ce <_printf_i+0x14a>
 80036ee:	4665      	mov	r5, ip
 80036f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80036f4:	fb02 3311 	mls	r3, r2, r1, r3
 80036f8:	5cc3      	ldrb	r3, [r0, r3]
 80036fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80036fe:	460b      	mov	r3, r1
 8003700:	2900      	cmp	r1, #0
 8003702:	d1f5      	bne.n	80036f0 <_printf_i+0x16c>
 8003704:	e7b9      	b.n	800367a <_printf_i+0xf6>
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	6825      	ldr	r5, [r4, #0]
 800370a:	1d18      	adds	r0, r3, #4
 800370c:	6961      	ldr	r1, [r4, #20]
 800370e:	6010      	str	r0, [r2, #0]
 8003710:	0628      	lsls	r0, r5, #24
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	d501      	bpl.n	800371a <_printf_i+0x196>
 8003716:	6019      	str	r1, [r3, #0]
 8003718:	e002      	b.n	8003720 <_printf_i+0x19c>
 800371a:	066a      	lsls	r2, r5, #25
 800371c:	d5fb      	bpl.n	8003716 <_printf_i+0x192>
 800371e:	8019      	strh	r1, [r3, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	4665      	mov	r5, ip
 8003724:	6123      	str	r3, [r4, #16]
 8003726:	e7b9      	b.n	800369c <_printf_i+0x118>
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	1d19      	adds	r1, r3, #4
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	681d      	ldr	r5, [r3, #0]
 8003730:	6862      	ldr	r2, [r4, #4]
 8003732:	2100      	movs	r1, #0
 8003734:	4628      	mov	r0, r5
 8003736:	f000 f837 	bl	80037a8 <memchr>
 800373a:	b108      	cbz	r0, 8003740 <_printf_i+0x1bc>
 800373c:	1b40      	subs	r0, r0, r5
 800373e:	6060      	str	r0, [r4, #4]
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	2300      	movs	r3, #0
 8003746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374a:	e7a7      	b.n	800369c <_printf_i+0x118>
 800374c:	6923      	ldr	r3, [r4, #16]
 800374e:	462a      	mov	r2, r5
 8003750:	4639      	mov	r1, r7
 8003752:	4630      	mov	r0, r6
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d0aa      	beq.n	80036b0 <_printf_i+0x12c>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	079b      	lsls	r3, r3, #30
 800375e:	d413      	bmi.n	8003788 <_printf_i+0x204>
 8003760:	68e0      	ldr	r0, [r4, #12]
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	4298      	cmp	r0, r3
 8003766:	bfb8      	it	lt
 8003768:	4618      	movlt	r0, r3
 800376a:	e7a3      	b.n	80036b4 <_printf_i+0x130>
 800376c:	2301      	movs	r3, #1
 800376e:	464a      	mov	r2, r9
 8003770:	4639      	mov	r1, r7
 8003772:	4630      	mov	r0, r6
 8003774:	47c0      	blx	r8
 8003776:	3001      	adds	r0, #1
 8003778:	d09a      	beq.n	80036b0 <_printf_i+0x12c>
 800377a:	3501      	adds	r5, #1
 800377c:	68e3      	ldr	r3, [r4, #12]
 800377e:	9a03      	ldr	r2, [sp, #12]
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	42ab      	cmp	r3, r5
 8003784:	dcf2      	bgt.n	800376c <_printf_i+0x1e8>
 8003786:	e7eb      	b.n	8003760 <_printf_i+0x1dc>
 8003788:	2500      	movs	r5, #0
 800378a:	f104 0919 	add.w	r9, r4, #25
 800378e:	e7f5      	b.n	800377c <_printf_i+0x1f8>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ac      	bne.n	80036ee <_printf_i+0x16a>
 8003794:	7803      	ldrb	r3, [r0, #0]
 8003796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800379e:	e76c      	b.n	800367a <_printf_i+0xf6>
 80037a0:	08003a85 	.word	0x08003a85
 80037a4:	08003a96 	.word	0x08003a96

080037a8 <memchr>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	b2c9      	uxtb	r1, r1
 80037ac:	4402      	add	r2, r0
 80037ae:	4290      	cmp	r0, r2
 80037b0:	4603      	mov	r3, r0
 80037b2:	d101      	bne.n	80037b8 <memchr+0x10>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e003      	b.n	80037c0 <memchr+0x18>
 80037b8:	781c      	ldrb	r4, [r3, #0]
 80037ba:	3001      	adds	r0, #1
 80037bc:	428c      	cmp	r4, r1
 80037be:	d1f6      	bne.n	80037ae <memchr+0x6>
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd10      	pop	{r4, pc}

080037c4 <memcpy>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	1e43      	subs	r3, r0, #1
 80037c8:	440a      	add	r2, r1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	d100      	bne.n	80037d0 <memcpy+0xc>
 80037ce:	bd10      	pop	{r4, pc}
 80037d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d8:	e7f7      	b.n	80037ca <memcpy+0x6>

080037da <memmove>:
 80037da:	4288      	cmp	r0, r1
 80037dc:	b510      	push	{r4, lr}
 80037de:	eb01 0302 	add.w	r3, r1, r2
 80037e2:	d807      	bhi.n	80037f4 <memmove+0x1a>
 80037e4:	1e42      	subs	r2, r0, #1
 80037e6:	4299      	cmp	r1, r3
 80037e8:	d00a      	beq.n	8003800 <memmove+0x26>
 80037ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037f2:	e7f8      	b.n	80037e6 <memmove+0xc>
 80037f4:	4283      	cmp	r3, r0
 80037f6:	d9f5      	bls.n	80037e4 <memmove+0xa>
 80037f8:	1881      	adds	r1, r0, r2
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	42d3      	cmn	r3, r2
 80037fe:	d100      	bne.n	8003802 <memmove+0x28>
 8003800:	bd10      	pop	{r4, pc}
 8003802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003806:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800380a:	e7f7      	b.n	80037fc <memmove+0x22>

0800380c <_free_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4605      	mov	r5, r0
 8003810:	2900      	cmp	r1, #0
 8003812:	d043      	beq.n	800389c <_free_r+0x90>
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f0c      	subs	r4, r1, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfb8      	it	lt
 800381e:	18e4      	addlt	r4, r4, r3
 8003820:	f000 f8d0 	bl	80039c4 <__malloc_lock>
 8003824:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <_free_r+0x94>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	4610      	mov	r0, r2
 800382a:	b933      	cbnz	r3, 800383a <_free_r+0x2e>
 800382c:	6063      	str	r3, [r4, #4]
 800382e:	6014      	str	r4, [r2, #0]
 8003830:	4628      	mov	r0, r5
 8003832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003836:	f000 b8c6 	b.w	80039c6 <__malloc_unlock>
 800383a:	42a3      	cmp	r3, r4
 800383c:	d90b      	bls.n	8003856 <_free_r+0x4a>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	1862      	adds	r2, r4, r1
 8003842:	4293      	cmp	r3, r2
 8003844:	bf01      	itttt	eq
 8003846:	681a      	ldreq	r2, [r3, #0]
 8003848:	685b      	ldreq	r3, [r3, #4]
 800384a:	1852      	addeq	r2, r2, r1
 800384c:	6022      	streq	r2, [r4, #0]
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6004      	str	r4, [r0, #0]
 8003852:	e7ed      	b.n	8003830 <_free_r+0x24>
 8003854:	4613      	mov	r3, r2
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	b10a      	cbz	r2, 800385e <_free_r+0x52>
 800385a:	42a2      	cmp	r2, r4
 800385c:	d9fa      	bls.n	8003854 <_free_r+0x48>
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	1858      	adds	r0, r3, r1
 8003862:	42a0      	cmp	r0, r4
 8003864:	d10b      	bne.n	800387e <_free_r+0x72>
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	4401      	add	r1, r0
 800386a:	1858      	adds	r0, r3, r1
 800386c:	4282      	cmp	r2, r0
 800386e:	6019      	str	r1, [r3, #0]
 8003870:	d1de      	bne.n	8003830 <_free_r+0x24>
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	4401      	add	r1, r0
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	e7d8      	b.n	8003830 <_free_r+0x24>
 800387e:	d902      	bls.n	8003886 <_free_r+0x7a>
 8003880:	230c      	movs	r3, #12
 8003882:	602b      	str	r3, [r5, #0]
 8003884:	e7d4      	b.n	8003830 <_free_r+0x24>
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	1821      	adds	r1, r4, r0
 800388a:	428a      	cmp	r2, r1
 800388c:	bf01      	itttt	eq
 800388e:	6811      	ldreq	r1, [r2, #0]
 8003890:	6852      	ldreq	r2, [r2, #4]
 8003892:	1809      	addeq	r1, r1, r0
 8003894:	6021      	streq	r1, [r4, #0]
 8003896:	6062      	str	r2, [r4, #4]
 8003898:	605c      	str	r4, [r3, #4]
 800389a:	e7c9      	b.n	8003830 <_free_r+0x24>
 800389c:	bd38      	pop	{r3, r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	20000090 	.word	0x20000090

080038a4 <_malloc_r>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	1ccd      	adds	r5, r1, #3
 80038a8:	f025 0503 	bic.w	r5, r5, #3
 80038ac:	3508      	adds	r5, #8
 80038ae:	2d0c      	cmp	r5, #12
 80038b0:	bf38      	it	cc
 80038b2:	250c      	movcc	r5, #12
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	4606      	mov	r6, r0
 80038b8:	db01      	blt.n	80038be <_malloc_r+0x1a>
 80038ba:	42a9      	cmp	r1, r5
 80038bc:	d903      	bls.n	80038c6 <_malloc_r+0x22>
 80038be:	230c      	movs	r3, #12
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	2000      	movs	r0, #0
 80038c4:	bd70      	pop	{r4, r5, r6, pc}
 80038c6:	f000 f87d 	bl	80039c4 <__malloc_lock>
 80038ca:	4a21      	ldr	r2, [pc, #132]	; (8003950 <_malloc_r+0xac>)
 80038cc:	6814      	ldr	r4, [r2, #0]
 80038ce:	4621      	mov	r1, r4
 80038d0:	b991      	cbnz	r1, 80038f8 <_malloc_r+0x54>
 80038d2:	4c20      	ldr	r4, [pc, #128]	; (8003954 <_malloc_r+0xb0>)
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	b91b      	cbnz	r3, 80038e0 <_malloc_r+0x3c>
 80038d8:	4630      	mov	r0, r6
 80038da:	f000 f863 	bl	80039a4 <_sbrk_r>
 80038de:	6020      	str	r0, [r4, #0]
 80038e0:	4629      	mov	r1, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f85e 	bl	80039a4 <_sbrk_r>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d124      	bne.n	8003936 <_malloc_r+0x92>
 80038ec:	230c      	movs	r3, #12
 80038ee:	4630      	mov	r0, r6
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	f000 f868 	bl	80039c6 <__malloc_unlock>
 80038f6:	e7e4      	b.n	80038c2 <_malloc_r+0x1e>
 80038f8:	680b      	ldr	r3, [r1, #0]
 80038fa:	1b5b      	subs	r3, r3, r5
 80038fc:	d418      	bmi.n	8003930 <_malloc_r+0x8c>
 80038fe:	2b0b      	cmp	r3, #11
 8003900:	d90f      	bls.n	8003922 <_malloc_r+0x7e>
 8003902:	600b      	str	r3, [r1, #0]
 8003904:	18cc      	adds	r4, r1, r3
 8003906:	50cd      	str	r5, [r1, r3]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 f85c 	bl	80039c6 <__malloc_unlock>
 800390e:	f104 000b 	add.w	r0, r4, #11
 8003912:	1d23      	adds	r3, r4, #4
 8003914:	f020 0007 	bic.w	r0, r0, #7
 8003918:	1ac3      	subs	r3, r0, r3
 800391a:	d0d3      	beq.n	80038c4 <_malloc_r+0x20>
 800391c:	425a      	negs	r2, r3
 800391e:	50e2      	str	r2, [r4, r3]
 8003920:	e7d0      	b.n	80038c4 <_malloc_r+0x20>
 8003922:	684b      	ldr	r3, [r1, #4]
 8003924:	428c      	cmp	r4, r1
 8003926:	bf16      	itet	ne
 8003928:	6063      	strne	r3, [r4, #4]
 800392a:	6013      	streq	r3, [r2, #0]
 800392c:	460c      	movne	r4, r1
 800392e:	e7eb      	b.n	8003908 <_malloc_r+0x64>
 8003930:	460c      	mov	r4, r1
 8003932:	6849      	ldr	r1, [r1, #4]
 8003934:	e7cc      	b.n	80038d0 <_malloc_r+0x2c>
 8003936:	1cc4      	adds	r4, r0, #3
 8003938:	f024 0403 	bic.w	r4, r4, #3
 800393c:	42a0      	cmp	r0, r4
 800393e:	d005      	beq.n	800394c <_malloc_r+0xa8>
 8003940:	1a21      	subs	r1, r4, r0
 8003942:	4630      	mov	r0, r6
 8003944:	f000 f82e 	bl	80039a4 <_sbrk_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d0cf      	beq.n	80038ec <_malloc_r+0x48>
 800394c:	6025      	str	r5, [r4, #0]
 800394e:	e7db      	b.n	8003908 <_malloc_r+0x64>
 8003950:	20000090 	.word	0x20000090
 8003954:	20000094 	.word	0x20000094

08003958 <_realloc_r>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	4607      	mov	r7, r0
 800395c:	4614      	mov	r4, r2
 800395e:	460e      	mov	r6, r1
 8003960:	b921      	cbnz	r1, 800396c <_realloc_r+0x14>
 8003962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003966:	4611      	mov	r1, r2
 8003968:	f7ff bf9c 	b.w	80038a4 <_malloc_r>
 800396c:	b922      	cbnz	r2, 8003978 <_realloc_r+0x20>
 800396e:	f7ff ff4d 	bl	800380c <_free_r>
 8003972:	4625      	mov	r5, r4
 8003974:	4628      	mov	r0, r5
 8003976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003978:	f000 f826 	bl	80039c8 <_malloc_usable_size_r>
 800397c:	42a0      	cmp	r0, r4
 800397e:	d20f      	bcs.n	80039a0 <_realloc_r+0x48>
 8003980:	4621      	mov	r1, r4
 8003982:	4638      	mov	r0, r7
 8003984:	f7ff ff8e 	bl	80038a4 <_malloc_r>
 8003988:	4605      	mov	r5, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d0f2      	beq.n	8003974 <_realloc_r+0x1c>
 800398e:	4631      	mov	r1, r6
 8003990:	4622      	mov	r2, r4
 8003992:	f7ff ff17 	bl	80037c4 <memcpy>
 8003996:	4631      	mov	r1, r6
 8003998:	4638      	mov	r0, r7
 800399a:	f7ff ff37 	bl	800380c <_free_r>
 800399e:	e7e9      	b.n	8003974 <_realloc_r+0x1c>
 80039a0:	4635      	mov	r5, r6
 80039a2:	e7e7      	b.n	8003974 <_realloc_r+0x1c>

080039a4 <_sbrk_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	2300      	movs	r3, #0
 80039a8:	4c05      	ldr	r4, [pc, #20]	; (80039c0 <_sbrk_r+0x1c>)
 80039aa:	4605      	mov	r5, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	f7fd f9c4 	bl	8000d3c <_sbrk>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_sbrk_r+0x1a>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	b103      	cbz	r3, 80039be <_sbrk_r+0x1a>
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	20000130 	.word	0x20000130

080039c4 <__malloc_lock>:
 80039c4:	4770      	bx	lr

080039c6 <__malloc_unlock>:
 80039c6:	4770      	bx	lr

080039c8 <_malloc_usable_size_r>:
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f18      	subs	r0, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfbc      	itt	lt
 80039d2:	580b      	ldrlt	r3, [r1, r0]
 80039d4:	18c0      	addlt	r0, r0, r3
 80039d6:	4770      	bx	lr

080039d8 <_init>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr

080039e4 <_fini>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr
